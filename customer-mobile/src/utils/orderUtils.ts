/**
 * üÜî Order ID Display Utilities
 * Chu·∫©n h√≥a hi·ªÉn th·ªã ID ƒë∆°n h√†ng theo ngu·ªìn:
 * - ƒê∆°n h√†ng n·ªôi b·ªô: DH-12345678 (8 k√Ω t·ª± cu·ªëi t·ª´ UUID)
 * - ƒê∆°n h√†ng s√†n th∆∞∆°ng m·∫°i: Gi·ªØ nguy√™n ID g·ªëc
 */

export interface OrderDisplayData {
  id: string;
  source?: string | null;
  sourceOrderId?: string | null;
  sourceReference?: string | null;
}

/**
 * Chu·∫©n h√≥a order object ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng v·ªõi utilities
 * Chuy·ªÉn ƒë·ªïi nested sourceInfo th√†nh root-level properties
 */
export function normalizeOrderForDisplay(order: any): OrderDisplayData {
  // Ki·ªÉm tra v√† x·ª≠ l√Ω nested sourceInfo structure
  const sourceInfo = order.sourceInfo || {};
  
  return {
    id: order.id,
    source: order.source || sourceInfo.source || null,
    sourceOrderId: order.sourceOrderId || sourceInfo.sourceOrderId || null,
    sourceReference: order.sourceReference || sourceInfo.sourceReference || null
  };
}

/**
 * Format order ID cho hi·ªÉn th·ªã d·ª±a tr√™n ngu·ªìn ƒë∆°n h√†ng (v·ªõi auto-normalization)
 */
export function formatOrderId(order: OrderDisplayData | any): string {
  const normalizedOrder = 'sourceInfo' in order ? normalizeOrderForDisplay(order) : order;
  // ƒê∆°n h√†ng t·ª´ s√†n th∆∞∆°ng m·∫°i - gi·ªØ nguy√™n ID g·ªëc
  if (isMarketplaceOrder(normalizedOrder)) {
    // ∆Øu ti√™n sourceOrderId n·∫øu c√≥, fallback v·ªÅ ID ƒë∆∞·ª£c format
    if (normalizedOrder.sourceOrderId) {
      return normalizedOrder.sourceOrderId;
    }
    
    // N·∫øu kh√¥ng c√≥ sourceOrderId, format v·ªõi prefix theo platform
    switch (normalizedOrder.source) {
      case 'tiktok-shop':
        return `TTS-${normalizedOrder.id.slice(-8).toUpperCase()}`;
      case 'shopee':
        return `SPE-${normalizedOrder.id.slice(-8).toUpperCase()}`;
      default:
        return normalizedOrder.id.slice(-8).toUpperCase();
    }
  }
  
  // ƒê∆°n h√†ng n·ªôi b·ªô - ch·ªâ hi·ªÉn th·ªã 8 ch·ªØ s·ªë thu·∫ßn t√∫y
  const digitsOnly = normalizedOrder.id.replace(/\D/g, ''); // Ch·ªâ l·∫•y s·ªë
  return digitsOnly.slice(-8).padStart(8, '0'); // 8 s·ªë cu·ªëi, pad v·ªõi 0 n·∫øu thi·∫øu
}

/**
 * Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ ph·∫£i t·ª´ s√†n th∆∞∆°ng m·∫°i kh√¥ng (v·ªõi auto-normalization)
 */
export function isMarketplaceOrder(order: OrderDisplayData | any): boolean {
  const normalizedOrder = 'sourceInfo' in order ? normalizeOrderForDisplay(order) : order;
  const marketplaceSources = ['tiktok-shop', 'shopee', 'lazada', 'facebook-shop', 'instagram-shop'];
  return normalizedOrder.source ? marketplaceSources.includes(normalizedOrder.source) : false;
}

/**
 * L·∫•y ID ng·∫Øn cho hi·ªÉn th·ªã (8 k√Ω t·ª± cu·ªëi, vi·∫øt hoa) - kh√¥ng ph·ª• thu·ªôc v√†o source
 */
export function getShortOrderId(order: OrderDisplayData | any): string {
  return order.id.slice(-8).toUpperCase();
}

/**
 * Format order ID cho QR payment (ƒë∆°n h√†ng n·ªôi b·ªô) - v·ªõi auto-normalization
 */
export function formatOrderIdForPayment(order: OrderDisplayData | any): string {
  const normalizedOrder = 'sourceInfo' in order ? normalizeOrderForDisplay(order) : order;
  // Ch·ªâ format cho ƒë∆°n h√†ng n·ªôi b·ªô
  if (isMarketplaceOrder(normalizedOrder)) {
    return normalizedOrder.sourceOrderId || normalizedOrder.id.slice(-8).toUpperCase();
  }
  
  // ƒê∆°n h√†ng n·ªôi b·ªô - ch·ªâ hi·ªÉn th·ªã 8 ch·ªØ s·ªë thu·∫ßn t√∫y cho QR payment
  const digitsOnly = normalizedOrder.id.replace(/\D/g, ''); // Ch·ªâ l·∫•y s·ªë
  return digitsOnly.slice(-8).padStart(8, '0'); // 8 s·ªë cu·ªëi, pad v·ªõi 0 n·∫øu thi·∫øu
}

/**
 * L·∫•y source name hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
 */
export function getOrderSourceDisplayName(source?: string | null): string {
  const sourceNames: Record<string, string> = {
    'admin': 'Qu·∫£n tr·ªã',
    'storefront': 'Website',
    'landing-page': 'Landing Page',
    'tiktok-shop': 'TikTok Shop',
    'shopee': 'Shopee',
    'lazada': 'Lazada',
    'facebook-shop': 'Facebook Shop',
    'instagram-shop': 'Instagram Shop'
  };
  
  return sourceNames[source || 'admin'] || 'Kh√°c';
}

/**
 * T·∫°o display object v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß cho order
 */
export function createOrderDisplayInfo(order: OrderDisplayData) {
  return {
    id: formatOrderId(order),
    shortId: getShortOrderId(order),
    paymentId: formatOrderIdForPayment(order),
    sourceName: getOrderSourceDisplayName(order.source),
    isMarketplace: isMarketplaceOrder(order),
    originalId: order.id
  };
}

/**
 * Copy order ID to clipboard v·ªõi format ph√π h·ª£p
 */
export function copyOrderIdToClipboard(order: OrderDisplayData, description: string = "M√£ ƒë∆°n h√†ng"): Promise<boolean> {
  const orderId = formatOrderId(order);
  
  return navigator.clipboard.writeText(orderId).then(() => {
    console.log(`üìã ƒê√£ copy ${description}: ${orderId}`);
    return true;
  }).catch((err) => {
    console.error('‚ùå Kh√¥ng th·ªÉ copy order ID:', err);
    return false;
  });
}