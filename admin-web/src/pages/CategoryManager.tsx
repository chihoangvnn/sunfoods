import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Checkbox } from "@/components/ui/checkbox";
import { Separator } from "@/components/ui/separator";
import { useToast } from "@/hooks/use-toast";
import { Plus, ChevronUp, ChevronDown, Pencil, X, Save, Settings, Eye, Sparkles } from "lucide-react";

interface Industry {
  id: string;
  name: string;
  description?: string;
  isActive: boolean;
  sortOrder: number;
  createdAt?: string;
  updatedAt?: string;
}

// Consultation configuration types
interface CategoryConsultationConfig {
  enabled_types: string[];
  required_fields: string[];
  optional_fields: string[];
  auto_prompts: string[];
}

interface CategoryConsultationTemplates {
  usage_guide_template?: string;
  safety_template?: string;
  recipe_template?: string;
  technical_template?: string;
  benefits_template?: string;
  care_template?: string;
  storage_template?: string;
  health_benefits_template?: string;
  skin_benefits_template?: string;
  care_instructions_template?: string;
  troubleshooting_template?: string;
  compatibility_template?: string;
}

interface CategorySalesTemplate {
  template?: string;
  target_customer_prompts?: string[];
  selling_point_prompts?: string[];
  objection_handling?: string[];
  cross_sell_suggestions?: string[];
}

interface Category {
  id: string;
  name: string;
  description?: string;
  industryId: string;
  isActive: boolean;
  sortOrder: number;
  createdAt?: string;
  updatedAt?: string;
  consultationConfig?: CategoryConsultationConfig;
  consultationTemplates?: CategoryConsultationTemplates;
  salesAdviceTemplate?: CategorySalesTemplate;
}

interface CategoryFormData {
  name: string;
  description: string;
  industryId: string;
  isActive: boolean;
  sortOrder: number;
  consultationConfig: CategoryConsultationConfig;
  consultationTemplates: CategoryConsultationTemplates;
  salesAdviceTemplate: CategorySalesTemplate;
}

export default function CategoryManager() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [showForm, setShowForm] = useState(false);
  const [editingCategory, setEditingCategory] = useState<Category | null>(null);
  const [selectedIndustryFilter, setSelectedIndustryFilter] = useState<string>("all");
  const [activeTab, setActiveTab] = useState("basic");
  
  // Available consultation types for Vietnamese retail
  const consultationTypes = [
    { id: "usage_guide", label: "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", icon: "‚ú®" },
    { id: "safety_profile", label: "An to√†n & l∆∞u √Ω", icon: "‚ö†Ô∏è" },
    { id: "storage", label: "B·∫£o qu·∫£n", icon: "üè™" },
    { id: "health_benefits", label: "L·ª£i √≠ch s·ª©c kh·ªèe", icon: "üíä" },
    { id: "skin_benefits", label: "L·ª£i √≠ch da", icon: "‚ú®" },
    { id: "care_instructions", label: "ChƒÉm s√≥c", icon: "üåü" },
    { id: "technical_guide", label: "K·ªπ thu·∫≠t", icon: "üîß" },
    { id: "troubleshooting", label: "Kh·∫Øc ph·ª•c l·ªói", icon: "üõ†Ô∏è" },
    { id: "compatibility", label: "T∆∞∆°ng th√≠ch", icon: "üîå" },
    { id: "recipes", label: "C√¥ng th·ª©c", icon: "üìù" }
  ];
  
  // Available required fields for products
  const availableFields = [
    { id: "lo·∫°i_da_ph√π_h·ª£p", label: "Lo·∫°i da ph√π h·ª£p" },
    { id: "c√°ch_thoa", label: "C√°ch thoa" },
    { id: "t·∫ßn_su·∫•t_s·ª≠_d·ª•ng", label: "T·∫ßn su·∫•t s·ª≠ d·ª•ng" },
    { id: "ƒë·ªô_tu·ªïi_khuy·∫øn_ngh·ªã", label: "ƒê·ªô tu·ªïi khuy·∫øn ngh·ªã" },
    { id: "patch_test", label: "Patch test" },
    { id: "th√†nh_ph·∫ßn_ch√≠nh", label: "Th√†nh ph·∫ßn ch√≠nh" },
    { id: "li·ªÅu_d√πng", label: "Li·ªÅu d√πng" },
    { id: "th·ªùi_gian_s·ª≠_d·ª•ng", label: "Th·ªùi gian s·ª≠ d·ª•ng" },
    { id: "ƒë·ªëi_t∆∞·ª£ng_s·ª≠_d·ª•ng", label: "ƒê·ªëi t∆∞·ª£ng s·ª≠ d·ª•ng" },
    { id: "ch·ªëng_ch·ªâ_ƒë·ªãnh", label: "Ch·ªëng ch·ªâ ƒë·ªãnh" },
    { id: "th√¥ng_s·ªë_k·ªπ_thu·∫≠t", label: "Th√¥ng s·ªë k·ªπ thu·∫≠t" },
    { id: "y√™u_c·∫ßu_h·ªá_th·ªëng", label: "Y√™u c·∫ßu h·ªá th·ªëng" },
    { id: "b·∫£o_h√†nh", label: "B·∫£o h√†nh" },
    // üç≤ Food & beverage specific fields
    { id: "c√°ch_b·∫£o_qu·∫£n", label: "C√°ch b·∫£o qu·∫£n" },
    { id: "h·∫°n_s·ª≠_d·ª•ng", label: "H·∫°n s·ª≠ d·ª•ng" },
    { id: "nguy√™n_li·ªáu", label: "Nguy√™n li·ªáu" },
    { id: "xu·∫•t_x·ª©", label: "Xu·∫•t x·ª©" },
    { id: "ch·ª©ng_nh·∫≠n", label: "Ch·ª©ng nh·∫≠n" },
    // üîß General purpose fields
    { id: "c√°ch_s·ª≠_d·ª•ng_c∆°_b·∫£n", label: "C√°ch s·ª≠ d·ª•ng c∆° b·∫£n" },
    { id: "l∆∞u_√Ω_ƒë·∫∑c_bi·ªát", label: "L∆∞u √Ω ƒë·∫∑c bi·ªát" },
    { id: "ƒëi·ªÅu_ki·ªán_b·∫£o_qu·∫£n", label: "ƒêi·ªÅu ki·ªán b·∫£o qu·∫£n" },
    { id: "khuy·∫øn_ngh·ªã_chuy√™n_gia", label: "Khuy·∫øn ngh·ªã chuy√™n gia" }
  ];
  const [formData, setFormData] = useState<CategoryFormData>({
    name: "",
    description: "",
    industryId: "",
    isActive: true,
    sortOrder: 0,
    consultationConfig: {
      enabled_types: [],
      required_fields: [],
      optional_fields: [],
      auto_prompts: []
    },
    consultationTemplates: {},
    salesAdviceTemplate: {}
  });

  // Fetch industries
  const { data: industries = [], isLoading: industriesLoading, error: industriesError } = useQuery<Industry[]>({
    queryKey: ['/api/industries'],
    queryFn: async () => {
      const response = await fetch('/api/industries');
      if (!response.ok) throw new Error('Failed to fetch industries');
      return response.json();
    },
  });

  // Fetch categories
  const { data: categories = [], isLoading: categoriesLoading, error: categoriesError } = useQuery<Category[]>({
    queryKey: ['/api/categories'],
    queryFn: async () => {
      const response = await fetch('/api/categories');
      if (!response.ok) throw new Error('Failed to fetch categories');
      return response.json();
    },
  });

  const isLoading = industriesLoading || categoriesLoading;
  const error = industriesError || categoriesError;

  // Save category mutation
  const saveMutation = useMutation({
    mutationFn: async (data: CategoryFormData) => {
      const url = editingCategory ? `/api/categories/${editingCategory.id}` : '/api/categories';
      const method = editingCategory ? 'PUT' : 'POST';
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      
      if (!response.ok) {
        try {
          const error = await response.json();
          throw new Error(error.error || 'Failed to save category');
        } catch {
          throw new Error('Failed to save category');
        }
      }
      
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Th√†nh c√¥ng",
        description: `Danh m·ª•c ƒë√£ ƒë∆∞·ª£c ${editingCategory ? 'c·∫≠p nh·∫≠t' : 'th√™m'}`,
      });
      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });
      resetForm();
    },
    onError: (error: Error) => {
      toast({
        title: "L·ªói",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Delete category mutation
  const deleteMutation = useMutation({
    mutationFn: async (id: string) => {
      const response = await fetch(`/api/categories/${id}`, {
        method: 'DELETE',
      });
      if (!response.ok) throw new Error('Failed to delete');
      // Handle 204 No Content or empty response
      if (response.status === 204 || response.headers.get('content-length') === '0') {
        return null;
      }
      try {
        return await response.json();
      } catch {
        return null; // Fallback for empty/non-JSON responses
      }
    },
    onSuccess: () => {
      toast({
        title: "Th√†nh c√¥ng",
        description: "Danh m·ª•c ƒë√£ ƒë∆∞·ª£c x√≥a",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });
    },
    onError: () => {
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ x√≥a danh m·ª•c",
        variant: "destructive",
      });
    },
  });

  // Update sort order mutation
  const updateSortMutation = useMutation({
    mutationFn: async ({ id, sortOrder }: { id: string; sortOrder: number }) => {
      const response = await fetch(`/api/categories/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ sortOrder }),
      });
      if (!response.ok) throw new Error('Failed to update sort order');
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });
    },
    onError: () => {
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ di chuy·ªÉn danh m·ª•c",
        variant: "destructive",
      });
    },
  });

  const resetForm = () => {
    setFormData({
      name: "",
      description: "",
      industryId: "",
      isActive: true,
      sortOrder: 0,
      consultationConfig: {
        enabled_types: [],
        required_fields: [],
        optional_fields: [],
        auto_prompts: []
      },
      consultationTemplates: {},
      salesAdviceTemplate: {}
    });
    setEditingCategory(null);
    setShowForm(false);
  };

  const handleCreate = () => {
    // Get max sort order for the selected industry filter or all categories
    const relevantCategories = selectedIndustryFilter !== 'all' 
      ? categories.filter(c => c.industryId === selectedIndustryFilter)
      : categories;
    const maxSortOrder = Math.max(...relevantCategories.map(c => c.sortOrder), -1);
    
    setFormData({
      name: "",
      description: "",
      industryId: selectedIndustryFilter !== 'all' ? selectedIndustryFilter : "",
      isActive: true,
      sortOrder: maxSortOrder + 1,
      consultationConfig: {
        enabled_types: [],
        required_fields: [],
        optional_fields: [],
        auto_prompts: []
      },
      consultationTemplates: {},
      salesAdviceTemplate: {}
    });
    setEditingCategory(null);
    setShowForm(true);
  };

  const handleEdit = (category: Category) => {
    setFormData({
      name: category.name,
      description: category.description || "",
      industryId: category.industryId,
      isActive: category.isActive,
      sortOrder: category.sortOrder,
      consultationConfig: category.consultationConfig || {
        enabled_types: [],
        required_fields: [],
        optional_fields: [],
        auto_prompts: []
      },
      consultationTemplates: category.consultationTemplates || {},
      salesAdviceTemplate: category.salesAdviceTemplate || {}
    });
    setEditingCategory(category);
    setShowForm(true);
  };

  const handleDelete = (category: Category) => {
    if (window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a danh m·ª•c "${category.name}"?`)) {
      deleteMutation.mutate(category.id);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.name.trim()) {
      toast({
        title: "L·ªói",
        description: "T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
        variant: "destructive",
      });
      return;
    }

    if (!formData.industryId || !industries.some(i => i.id === formData.industryId)) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng ch·ªçn ng√†nh h√†ng h·ª£p l·ªá",
        variant: "destructive",
      });
      return;
    }

    saveMutation.mutate({
      ...formData,
      name: formData.name.trim(),
      description: formData.description.trim(),
    });
  };

  const moveCategoryUp = (category: Category, index: number) => {
    if (index === 0) return;
    const prevCategory = filteredCategories[index - 1];
    updateSortMutation.mutate({ id: category.id, sortOrder: prevCategory.sortOrder });
    updateSortMutation.mutate({ id: prevCategory.id, sortOrder: category.sortOrder });
  };

  const moveCategoryDown = (category: Category, index: number) => {
    if (index === filteredCategories.length - 1) return;
    const nextCategory = filteredCategories[index + 1];
    updateSortMutation.mutate({ id: category.id, sortOrder: nextCategory.sortOrder });
    updateSortMutation.mutate({ id: nextCategory.id, sortOrder: category.sortOrder });
  };
  
  // Consultation configuration helpers
  const toggleConsultationType = (typeId: string) => {
    setFormData(prev => ({
      ...prev,
      consultationConfig: {
        ...prev.consultationConfig,
        enabled_types: (prev.consultationConfig.enabled_types || []).includes(typeId)
          ? (prev.consultationConfig.enabled_types || []).filter(t => t !== typeId)
          : [...(prev.consultationConfig.enabled_types || []), typeId]
      }
    }));
  };
  
  const toggleRequiredField = (fieldId: string) => {
    setFormData(prev => ({
      ...prev,
      consultationConfig: {
        ...prev.consultationConfig,
        required_fields: (prev.consultationConfig.required_fields || []).includes(fieldId)
          ? (prev.consultationConfig.required_fields || []).filter(f => f !== fieldId)
          : [...(prev.consultationConfig.required_fields || []), fieldId]
      }
    }));
  };
  
  const updateTemplate = (templateKey: keyof CategoryConsultationTemplates, value: string) => {
    setFormData(prev => ({
      ...prev,
      consultationTemplates: {
        ...prev.consultationTemplates,
        [templateKey]: value
      }
    }));
  };
  
  const addAutoPrompt = () => {
    const newPrompt = prompt("Nh·∫≠p c√¢u h·ªèi g·ª£i √Ω t·ª± ƒë·ªông:");
    if (newPrompt && newPrompt.trim()) {
      setFormData(prev => ({
        ...prev,
        consultationConfig: {
          ...prev.consultationConfig,
          auto_prompts: [...(prev.consultationConfig.auto_prompts || []), newPrompt.trim()]
        }
      }));
    }
  };
  
  const removeAutoPrompt = (index: number) => {
    setFormData(prev => ({
      ...prev,
      consultationConfig: {
        ...prev.consultationConfig,
        auto_prompts: (prev.consultationConfig.auto_prompts || []).filter((_, i) => i !== index)
      }
    }));
  };

  // Filter and sort categories
  const filteredCategories = categories
    .filter(category => selectedIndustryFilter && selectedIndustryFilter !== "all" ? category.industryId === selectedIndustryFilter : true)
    .sort((a, b) => a.sortOrder - b.sortOrder);

  // Get industry name helper
  const getIndustryName = (industryId: string) => {
    const industry = industries.find(i => i.id === industryId);
    return industry ? industry.name : 'Kh√¥ng x√°c ƒë·ªãnh';
  };

  // ü§ñ Smart Defaults: Industry-specific consultation configuration
  const getIndustrySmartDefaults = (industryId: string) => {
    const industry = industries.find(i => i.id === industryId);
    const industryName = industry?.name?.toLowerCase() || '';
    
    // Vietnamese retail industry patterns
    if (industryName.includes('m·ªπ ph·∫©m') || industryName.includes('l√†m ƒë·∫πp') || industryName.includes('beauty')) {
      return {
        enabled_types: ['usage_guide', 'safety_profile', 'skin_benefits', 'care_instructions'],
        required_fields: ['lo·∫°i_da_ph√π_h·ª£p', 'c√°ch_thoa', 't·∫ßn_su·∫•t_s·ª≠_d·ª•ng', 'patch_test'],
        optional_fields: ['ƒë·ªô_tu·ªïi_khuy·∫øn_ngh·ªã', 'th√†nh_ph·∫ßn_ch√≠nh'],
        auto_prompts: [
          'L√†n da b·∫°n thu·ªôc lo·∫°i n√†o? (da d·∫ßu, da kh√¥, da h·ªón h·ª£p, da nh·∫°y c·∫£m)',
          'B·∫°n ƒë√£ t·ª´ng d·ªã ·ª©ng v·ªõi s·∫£n ph·∫©m chƒÉm s√≥c da n√†o ch∆∞a?',
          'Hi·ªán t·∫°i b·∫°n ƒëang s·ª≠ d·ª•ng routine chƒÉm s√≥c da nh∆∞ th·∫ø n√†o?'
        ],
        templates: {
          usage_guide_template: '‚ú® **H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:**\n1. L√†m s·∫°ch da m·∫∑t\n2. {c√°ch_thoa}\n3. S·ª≠ d·ª•ng {t·∫ßn_su·∫•t_s·ª≠_d·ª•ng}\n4. Thoa kem ch·ªëng n·∫Øng n·∫øu d√πng ban ng√†y',
          safety_template: '‚ö†Ô∏è **AN TO√ÄN & L∆ØU √ù:**\n- Ph√π h·ª£p cho: {lo·∫°i_da_ph√π_h·ª£p}\n- {patch_test}\n- Ng∆∞ng s·ª≠ d·ª•ng n·∫øu c√≥ d·∫•u hi·ªáu k√≠ch ·ª©ng',
          skin_benefits_template: '‚ú® **L·ª¢I √çCH CHO DA:**\n- C·∫£i thi·ªán t√¨nh tr·∫°ng da\n- Ph√π h·ª£p v·ªõi {lo·∫°i_da_ph√π_h·ª£p}\n- {th√†nh_ph·∫ßn_ch√≠nh} gi√∫p nu√¥i d∆∞·ª°ng da'
        }
      };
    }
    
    if (industryName.includes('s·ª©c kh·ªèe') || industryName.includes('th·ª±c ph·∫©m ch·ª©c nƒÉng') || industryName.includes('health')) {
      return {
        enabled_types: ['usage_guide', 'safety_profile', 'health_benefits'],
        required_fields: ['li·ªÅu_d√πng', 'th·ªùi_gian_s·ª≠_d·ª•ng', 'ƒë·ªëi_t∆∞·ª£ng_s·ª≠_d·ª•ng', 'ch·ªëng_ch·ªâ_ƒë·ªãnh'],
        optional_fields: ['th√†nh_ph·∫ßn_ch√≠nh'],
        auto_prompts: [
          'B·∫°n c√≥ ƒëang d√πng thu·ªëc g√¨ kh√°c kh√¥ng?',
          'B·∫°n c√≥ ti·ªÅn s·ª≠ b·ªánh l√Ω g√¨ c·∫ßn l∆∞u √Ω?',
          'M·ª•c ti√™u s·ª©c kh·ªèe c·ªßa b·∫°n l√† g√¨?'
        ],
        templates: {
          usage_guide_template: 'üíä **H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:**\n- Li·ªÅu d√πng: {li·ªÅu_d√πng}\n- Th·ªùi gian: {th·ªùi_gian_s·ª≠_d·ª•ng}\n- U·ªëng c√πng v·ªõi n∆∞·ªõc ho·∫∑c sau b·ªØa ƒÉn',
          safety_template: '‚ö†Ô∏è **AN TO√ÄN & L∆ØU √ù:**\n- ƒê·ªëi t∆∞·ª£ng: {ƒë·ªëi_t∆∞·ª£ng_s·ª≠_d·ª•ng}\n- Ch·ªëng ch·ªâ ƒë·ªãnh: {ch·ªëng_ch·ªâ_ƒë·ªãnh}\n- Tham kh·∫£o √Ω ki·∫øn b√°c sƒ© n·∫øu c√≥ b·∫•t th∆∞·ªùng',
          health_benefits_template: 'üíä **L·ª¢I √çCH S·ª®C KH·ªéE:**\n- {th√†nh_ph·∫ßn_ch√≠nh}\n- H·ªó tr·ª£ s·ª©c kh·ªèe t·ªïng th·ªÉ\n- Ph√π h·ª£p cho: {ƒë·ªëi_t∆∞·ª£ng_s·ª≠_d·ª•ng}'
        }
      };
    }
    
    if (industryName.includes('ƒëi·ªán t·ª≠') || industryName.includes('c√¥ng ngh·ªá') || industryName.includes('electronics')) {
      return {
        enabled_types: ['usage_guide', 'technical_guide', 'troubleshooting', 'compatibility'],
        required_fields: ['th√¥ng_s·ªë_k·ªπ_thu·∫≠t', 'y√™u_c·∫ßu_h·ªá_th·ªëng', 'b·∫£o_h√†nh'],
        optional_fields: [],
        auto_prompts: [
          'B·∫°n s·ª≠ d·ª•ng thi·∫øt b·ªã n√†y ƒë·ªÉ l√†m g√¨?',
          'Thi·∫øt b·ªã hi·ªán t·∫°i c·ªßa b·∫°n c√≥ t∆∞∆°ng th√≠ch kh√¥ng?',
          'B·∫°n ƒë√£ c√≥ kinh nghi·ªám s·ª≠ d·ª•ng s·∫£n ph·∫©m t∆∞∆°ng t·ª± ch∆∞a?'
        ],
        templates: {
          usage_guide_template: 'üîß **H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:**\n1. Ki·ªÉm tra {y√™u_c·∫ßu_h·ªá_th·ªëng}\n2. K·∫øt n·ªëi v√† c√†i ƒë·∫∑t\n3. C·∫•u h√¨nh theo {th√¥ng_s·ªë_k·ªπ_thu·∫≠t}',
          technical_template: '‚öôÔ∏è **TH√îNG S·ªê K·ª∏ THU·∫¨T:**\n- {th√¥ng_s·ªë_k·ªπ_thu·∫≠t}\n- {y√™u_c·∫ßu_h·ªá_th·ªëng}\n- B·∫£o h√†nh: {b·∫£o_h√†nh}',
          troubleshooting_template: 'üõ†Ô∏è **KH·∫ÆC PH·ª§C L·ªñI:**\n1. Ki·ªÉm tra k·∫øt n·ªëi\n2. Kh·ªüi ƒë·ªông l·∫°i thi·∫øt b·ªã\n3. Li√™n h·ªá b·ªô ph·∫≠n k·ªπ thu·∫≠t n·∫øu v·∫´n g·∫∑p l·ªói'
        }
      };
    }
    
    if (industryName.includes('th·ª±c ph·∫©m') || industryName.includes('food') || industryName.includes('gia v·ªã')) {
      return {
        enabled_types: ['usage_guide', 'recipes', 'storage', 'health_benefits'],
        required_fields: ['th√†nh_ph·∫ßn_ch√≠nh', 'c√°ch_b·∫£o_qu·∫£n', 'h·∫°n_s·ª≠_d·ª•ng'],
        optional_fields: ['li·ªÅu_d√πng'],
        auto_prompts: [
          'B·∫°n c√≥ d·ªã ·ª©ng th·ª±c ph·∫©m n√†o kh√¥ng?',
          'B·∫°n th∆∞·ªùng n·∫•u ƒÉn theo phong c√°ch n√†o?',
          'Gia ƒë√¨nh b·∫°n c√≥ th√†nh vi√™n n√†o ƒÉn chay kh√¥ng?'
        ],
        templates: {
          usage_guide_template: 'üçΩÔ∏è **H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:**\n- Th√†nh ph·∫ßn: {th√†nh_ph·∫ßn_ch√≠nh}\n- C√°ch d√πng: {li·ªÅu_d√πng}\n- B·∫£o qu·∫£n: {c√°ch_b·∫£o_qu·∫£n}',
          recipes_template: 'üìù **C√îNG TH·ª®C G·ª¢I √ù:**\n- Nguy√™n li·ªáu ch√≠nh: {th√†nh_ph·∫ßn_ch√≠nh}\n- Ph√π h·ª£p cho c√°c m√≥n: [m√≥n ƒÉn ph√π h·ª£p]\n- L∆∞u √Ω: N√™m n·∫øm theo kh·∫©u v·ªã',
          storage_template: 'üè™ **C√ÅCH B·∫¢O QU·∫¢N:**\n- {c√°ch_b·∫£o_qu·∫£n}\n- H·∫°n s·ª≠ d·ª•ng: {h·∫°n_s·ª≠_d·ª•ng}\n- Tr√°nh √°nh n·∫Øng tr·ª±c ti·∫øp'
        }
      };
    }
    
    // Default fallback for other industries
    return {
      enabled_types: ['usage_guide', 'safety_profile'],
      required_fields: ['c√°ch_s·ª≠_d·ª•ng_c∆°_b·∫£n'],
      optional_fields: [],
      auto_prompts: [
        'B·∫°n ƒë√£ s·ª≠ d·ª•ng s·∫£n ph·∫©m t∆∞∆°ng t·ª± ch∆∞a?',
        'M·ª•c ƒë√≠ch s·ª≠ d·ª•ng c·ªßa b·∫°n l√† g√¨?'
      ],
      templates: {
        usage_guide_template: '‚ú® **H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:**\n1. {c√°ch_s·ª≠_d·ª•ng_c∆°_b·∫£n}\n2. Th·ª±c hi·ªán theo ch·ªâ d·∫´n\n3. Li√™n h·ªá n·∫øu c·∫ßn h·ªó tr·ª£'
      }
    };
  };

  // üöÄ Auto-populate consultation config when industry changes (for new categories only)
  const handleIndustryChange = (industryId: string) => {
    // Update industry in form data
    setFormData(prev => ({ ...prev, industryId }));
    
    // Auto-populate consultation config ONLY for new categories (not when editing)
    if (!editingCategory && industryId) {
      const smartDefaults = getIndustrySmartDefaults(industryId);
      
      setFormData(prev => ({
        ...prev,
        consultationConfig: {
          enabled_types: smartDefaults.enabled_types,
          required_fields: smartDefaults.required_fields,
          optional_fields: smartDefaults.optional_fields,
          auto_prompts: smartDefaults.auto_prompts
        },
        consultationTemplates: smartDefaults.templates || {}
      }));
      
      // Switch to consultation tab to show the auto-populated config
      setActiveTab('consultation');
      
      // Show success toast
      toast({
        title: "ü§ñ Smart Defaults",
        description: `ƒê√£ t·ª± ƒë·ªông c·∫•u h√¨nh t∆∞ v·∫•n cho ng√†nh "${getIndustryName(industryId)}". B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a th√™m n·∫øu c·∫ßn.`,
      });
    }
  };

  if (error) {
    return (
      <div className="container mx-auto p-6 max-w-6xl">
        <Card>
          <CardContent className="py-8">
            <div className="text-center">
              <p className="text-red-500 mb-4">L·ªói khi t·∫£i d·ªØ li·ªáu</p>
              <Button 
                onClick={() => {
                  queryClient.invalidateQueries({ queryKey: ['/api/industries'] });
                  queryClient.invalidateQueries({ queryKey: ['/api/categories'] });
                }}
                variant="outline"
              >
                Th·ª≠ l·∫°i
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
          <p>ƒêang t·∫£i danh m·ª•c...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 max-w-6xl" data-testid="page-categories">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold">Qu·∫£n l√Ω danh m·ª•c</h1>
          <p className="text-muted-foreground">
            Qu·∫£n l√Ω danh m·ª•c s·∫£n ph·∫©m v√† th·ª© t·ª± hi·ªÉn th·ªã
          </p>
        </div>
        <div className="flex items-center gap-4">
          <Select value={selectedIndustryFilter} onValueChange={setSelectedIndustryFilter}>
            <SelectTrigger className="w-48">
              <SelectValue placeholder="L·ªçc theo ng√†nh h√†ng" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">T·∫•t c·∫£ ng√†nh h√†ng</SelectItem>
              {industries.map((industry) => (
                <SelectItem key={industry.id} value={industry.id}>
                  {industry.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Button onClick={handleCreate} data-testid="button-add-category">
            <Plus className="h-4 w-4 mr-2" />
            Th√™m danh m·ª•c
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Categories List */}
        <div className="lg:col-span-2">
          {filteredCategories.length === 0 ? (
            <Card>
              <CardContent className="text-center py-12">
                <div className="mb-4">
                  <div className="w-16 h-16 mx-auto bg-muted rounded-full flex items-center justify-center">
                    <Plus className="h-8 w-8 text-muted-foreground" />
                  </div>
                </div>
                <h3 className="text-lg font-semibold mb-2">Ch∆∞a c√≥ danh m·ª•c n√†o</h3>
                <p className="text-muted-foreground mb-4">
                  Th√™m danh m·ª•c ƒë·∫ßu ti√™n ƒë·ªÉ ph√¢n lo·∫°i s·∫£n ph·∫©m
                </p>
                <Button onClick={handleCreate}>
                  <Plus className="h-4 w-4 mr-2" />
                  Th√™m danh m·ª•c ƒë·∫ßu ti√™n
                </Button>
              </CardContent>
            </Card>
          ) : (
            <div className="space-y-4">
              {filteredCategories.map((category, index) => (
                <Card key={category.id} className="hover-elevate" data-testid={`card-category-${category.id}`}>
                  <CardHeader className="pb-3">
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <div className="flex items-center gap-2">
                          <CardTitle className="text-lg">{category.name}</CardTitle>
                          <Badge variant={category.isActive ? "default" : "secondary"}>
                            {category.isActive ? "Ho·∫°t ƒë·ªông" : "T·∫°m d·ª´ng"}
                          </Badge>
                          <Badge variant="outline">
                            {getIndustryName(category.industryId)}
                          </Badge>
                        </div>
                        {category.description && (
                          <CardDescription className="mt-1">
                            {category.description}
                          </CardDescription>
                        )}
                      </div>
                      <div className="flex items-center gap-1">
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => moveCategoryUp(category, index)}
                          disabled={index === 0 || updateSortMutation.isPending}
                          data-testid={`button-move-up-${category.id}`}
                        >
                          <ChevronUp className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => moveCategoryDown(category, index)}
                          disabled={index === filteredCategories.length - 1 || updateSortMutation.isPending}
                          data-testid={`button-move-down-${category.id}`}
                        >
                          <ChevronDown className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleEdit(category)}
                          data-testid={`button-edit-${category.id}`}
                        >
                          <Pencil className="h-4 w-4" />
                        </Button>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => handleDelete(category)}
                          disabled={deleteMutation.isPending}
                          data-testid={`button-delete-${category.id}`}
                        >
                          <X className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="text-sm text-muted-foreground">
                      Th·ª© t·ª±: {category.sortOrder}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </div>

        {/* Category Form */}
        {showForm && (
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <div className="flex justify-between items-center">
                  <CardTitle>
                    {editingCategory ? 'S·ª≠a danh m·ª•c' : 'Th√™m danh m·ª•c m·ªõi'}
                  </CardTitle>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={resetForm}
                    data-testid="button-close-form"
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="basic">Th√¥ng tin c∆° b·∫£n</TabsTrigger>
                    <TabsTrigger value="consultation" className="flex items-center gap-2">
                      <Settings className="h-4 w-4" />
                      C·∫•u h√¨nh t∆∞ v·∫•n
                    </TabsTrigger>
                  </TabsList>
                  
                  <form onSubmit={handleSubmit} className="space-y-4 mt-4">
                    <TabsContent value="basic" className="space-y-4">
                      <div>
                        <Label htmlFor="categoryIndustry">Ng√†nh h√†ng *</Label>
                        <Select 
                          value={formData.industryId} 
                          onValueChange={handleIndustryChange}
                        >
                          <SelectTrigger>
                            <SelectValue placeholder="Ch·ªçn ng√†nh h√†ng" />
                          </SelectTrigger>
                          <SelectContent>
                            {industries.map((industry) => (
                              <SelectItem key={industry.id} value={industry.id}>
                                {industry.name}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>

                      <div>
                        <Label htmlFor="categoryName">T√™n danh m·ª•c *</Label>
                        <Input
                          id="categoryName"
                          value={formData.name}
                          onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                          placeholder="Nh·∫≠p t√™n danh m·ª•c"
                          data-testid="input-category-name"
                          required
                        />
                      </div>

                      <div>
                        <Label htmlFor="categoryDescription">M√¥ t·∫£</Label>
                        <Textarea
                          id="categoryDescription"
                          value={formData.description}
                          onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                          placeholder="M√¥ t·∫£ chi ti·∫øt danh m·ª•c"
                          rows={3}
                          data-testid="input-category-description"
                        />
                      </div>

                      <div>
                        <Label htmlFor="categorySortOrder">Th·ª© t·ª±</Label>
                        <Input
                          id="categorySortOrder"
                          type="number"
                          value={formData.sortOrder}
                          onChange={(e) => setFormData(prev => ({ ...prev, sortOrder: parseInt(e.target.value) || 0 }))}
                          placeholder="0"
                          data-testid="input-category-sort-order"
                        />
                      </div>

                      <div className="flex items-center justify-between">
                        <Label htmlFor="categoryActive">K√≠ch ho·∫°t</Label>
                        <Switch
                          id="categoryActive"
                          checked={formData.isActive}
                          onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}
                          data-testid="switch-category-active"
                        />
                      </div>
                    </TabsContent>

                    <TabsContent value="consultation" className="space-y-6">
                      {/* Consultation Types */}
                      <div>
                        <Label className="text-base font-semibold">ü§ñ Lo·∫°i t∆∞ v·∫•n ƒë∆∞·ª£c h·ªó tr·ª£</Label>
                        <p className="text-sm text-muted-foreground mb-3">
                          Ch·ªçn c√°c lo·∫°i t∆∞ v·∫•n m√† danh m·ª•c n√†y s·∫Ω h·ªó tr·ª£
                        </p>
                        <div className="grid grid-cols-2 gap-3">
                          {consultationTypes.map((type) => (
                            <div key={type.id} className="flex items-center space-x-2">
                              <Checkbox
                                id={`consultation-${type.id}`}
                                checked={(formData.consultationConfig.enabled_types || []).includes(type.id)}
                                onCheckedChange={() => toggleConsultationType(type.id)}
                              />
                              <Label 
                                htmlFor={`consultation-${type.id}`} 
                                className="text-sm cursor-pointer flex items-center gap-1"
                              >
                                <span>{type.icon}</span>
                                {type.label}
                              </Label>
                            </div>
                          ))}
                        </div>
                      </div>

                      <Separator />

                      {/* Required Fields */}
                      <div>
                        <Label className="text-base font-semibold">üìã Tr∆∞·ªùng b·∫Øt bu·ªôc khi th√™m s·∫£n ph·∫©m</Label>
                        <p className="text-sm text-muted-foreground mb-3">
                          Ch·ªçn c√°c tr∆∞·ªùng th√¥ng tin b·∫Øt bu·ªôc ph·∫£i ƒëi·ªÅn khi th√™m s·∫£n ph·∫©m thu·ªôc danh m·ª•c n√†y
                        </p>
                        <div className="grid grid-cols-2 gap-3">
                          {availableFields.map((field) => (
                            <div key={field.id} className="flex items-center space-x-2">
                              <Checkbox
                                id={`field-${field.id}`}
                                checked={(formData.consultationConfig.required_fields || []).includes(field.id)}
                                onCheckedChange={() => toggleRequiredField(field.id)}
                              />
                              <Label 
                                htmlFor={`field-${field.id}`} 
                                className="text-sm cursor-pointer leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                              >
                                {field.label}
                              </Label>
                            </div>
                          ))}
                        </div>
                      </div>

                      <Separator />

                      {/* Auto Prompts */}
                      <div>
                        <Label className="text-base font-semibold">üí¨ C√¢u h·ªèi g·ª£i √Ω t·ª± ƒë·ªông</Label>
                        <p className="text-sm text-muted-foreground mb-3">
                          Nh·ªØng c√¢u h·ªèi s·∫Ω ƒë∆∞·ª£c g·ª£i √Ω t·ª± ƒë·ªông cho kh√°ch h√†ng khi t∆∞ v·∫•n s·∫£n ph·∫©m
                        </p>
                        <div className="space-y-2">
                          {(formData.consultationConfig.auto_prompts || []).map((prompt, index) => (
                            <div key={index} className="flex items-center gap-2 p-2 bg-muted rounded">
                              <span className="flex-1 text-sm">{prompt}</span>
                              <Button
                                type="button"
                                variant="ghost"
                                size="sm"
                                onClick={() => removeAutoPrompt(index)}
                              >
                                <X className="h-4 w-4" />
                              </Button>
                            </div>
                          ))}
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={addAutoPrompt}
                            className="w-full"
                          >
                            <Plus className="h-4 w-4 mr-2" />
                            Th√™m c√¢u h·ªèi g·ª£i √Ω
                          </Button>
                        </div>
                      </div>

                      <Separator />

                      {/* Template Editor */}
                      <div>
                        <Label className="text-base font-semibold">üìù M·∫´u template t∆∞ v·∫•n</Label>
                        <p className="text-sm text-muted-foreground mb-3">
                          T·∫°o template cho t·ª´ng lo·∫°i t∆∞ v·∫•n ƒë√£ ch·ªçn (s·ª≠ d·ª•ng {"{bi·∫øn_s·ªë}"} cho placeholder)
                        </p>
                        <div className="space-y-4">
                          {(formData.consultationConfig.enabled_types || []).map((typeId) => {
                            const type = consultationTypes.find(t => t.id === typeId);
                            if (!type) return null;
                            
                            const templateKey = `${typeId}_template` as keyof CategoryConsultationTemplates;
                            
                            return (
                              <div key={typeId} className="space-y-2">
                                <Label className="flex items-center gap-2">
                                  <span>{type.icon}</span>
                                  Template {type.label}
                                </Label>
                                <Textarea
                                  value={formData.consultationTemplates[templateKey] || ''}
                                  onChange={(e) => updateTemplate(templateKey, e.target.value)}
                                  placeholder={`V√≠ d·ª•: ${type.icon} **${type.label.toUpperCase()}:**\n1. {b∆∞·ªõc_1}\n2. {b∆∞·ªõc_2}\n3. {b∆∞·ªõc_3}`}
                                  rows={3}
                                  className="font-mono text-sm"
                                />
                              </div>
                            );
                          })}
                        </div>
                      </div>
                    </TabsContent>

                    <div className="flex gap-3 pt-4">
                      <Button
                        type="button"
                        variant="outline"
                        onClick={resetForm}
                        className="flex-1"
                        data-testid="button-cancel"
                      >
                        H·ªßy
                      </Button>
                      <Button
                        type="submit"
                        disabled={saveMutation.isPending}
                        className="flex-1"
                        data-testid="button-save-category"
                      >
                        <Save className="h-4 w-4 mr-2" />
                        {saveMutation.isPending 
                          ? 'ƒêang l∆∞u...' 
                          : (editingCategory ? 'C·∫≠p nh·∫≠t' : 'Th√™m danh m·ª•c')
                        }
                      </Button>
                    </div>
                  </form>
                </Tabs>
              </CardContent>
            </Card>
          </div>
        )}
      </div>

      {/* Show total count */}
      <div className="mt-6 text-center text-muted-foreground">
        T·ªïng s·ªë {categories.length} danh m·ª•c
      </div>
    </div>
  );
}