/**
 * üáªüá≥ VIETNAMESE REVIEW GENERATOR
 * Generates authentic Vietnamese customer reviews for book sellers
 * Includes regional variations, cultural elements, and book-specific content
 */

import { generateVietnameseName, generateVietnameseAddress } from './vietnamese-data-generator';

// Vietnamese Regional Language Variations
export const REGIONAL_VARIATIONS = {
  "Mi·ªÅn B·∫Øc": {
    name: "Northern Vietnam",
    characteristics: ["Formal tone", "Academic language", "Detailed feedback"],
    pronouns: {
      "I": ["t√¥i", "em"],
      "you": ["anh", "ch·ªã", "b√°c"],
      "we": ["ch√∫ng t√¥i", "ch√∫ng em"]
    },
    regionalWords: {
      "very": "r·∫•t",
      "good": "t·ªët",
      "book": "s√°ch",
      "beautiful": "ƒë·∫πp",
      "fast": "nhanh",
      "quality": "ch·∫•t l∆∞·ª£ng",
      "service": "d·ªãch v·ª•"
    },
    courtesyLevel: "high"
  },
  "Mi·ªÅn Trung": {
    name: "Central Vietnam",
    characteristics: ["Poetic language", "Cultural references", "Traditional expressions"],
    pronouns: {
      "I": ["t√¥i", "ch√°u"],
      "you": ["anh", "ch·ªã", "th·∫ßy", "c√¥"],
      "we": ["ch√∫ng t√¥i"]
    },
    regionalWords: {
      "very": "r·∫•t",
      "good": "hay",
      "book": "s√°ch",
      "beautiful": "ƒë·∫πp",
      "fast": "nhanh",
      "quality": "ch·∫•t l∆∞·ª£ng",
      "service": "ph·ª•c v·ª•"
    },
    courtesyLevel: "very_high"
  },
  "Mi·ªÅn Nam": {
    name: "Southern Vietnam",
    characteristics: ["Casual tone", "Business-focused", "Direct feedback"],
    pronouns: {
      "I": ["t√¥i", "m√¨nh"],
      "you": ["anh", "ch·ªã", "b·∫°n"],
      "we": ["ch√∫ng m√¨nh", "ch√∫ng t√¥i"]
    },
    regionalWords: {
      "very": "r·∫•t",
      "good": "t·ªët",
      "book": "s√°ch",
      "beautiful": "ƒë·∫πp",
      "fast": "nhanh",
      "quality": "ch·∫•t l∆∞·ª£ng",
      "service": "d·ªãch v·ª•"
    },
    courtesyLevel: "medium"
  }
};

// Vietnamese Courtesy Expressions by Politeness Level
export const COURTESY_EXPRESSIONS = {
  very_polite: {
    openings: [
      "K√≠nh ch√†o anh/ch·ªã,",
      "Xin ch√†o anh/ch·ªã,", 
      "Ch√†o anh/ch·ªã ·∫°,",
      "Em xin ch√†o anh/ch·ªã,"
    ],
    appreciations: [
      "Em xin ch√¢n th√†nh c·∫£m ∆°n",
      "C·∫£m ∆°n anh/ch·ªã r·∫•t nhi·ªÅu",
      "Em r·∫•t bi·∫øt ∆°n",
      "Xin c·∫£m ∆°n s·ª± t·∫≠n t√¨nh c·ªßa anh/ch·ªã"
    ],
    closings: [
      "Em xin ch√¢n th√†nh c·∫£m ∆°n.",
      "C·∫£m ∆°n anh/ch·ªã nhi·ªÅu l·∫Øm ·∫°.",
      "Em s·∫Ω ti·∫øp t·ª•c ·ªßng h·ªô shop.",
      "Ch√∫c anh/ch·ªã v√† gia ƒë√¨nh nhi·ªÅu s·ª©c kh·ªèe."
    ]
  },
  polite: {
    openings: [
      "Ch√†o anh/ch·ªã,",
      "Xin ch√†o,",
      "Hello anh/ch·ªã,"
    ],
    appreciations: [
      "C·∫£m ∆°n anh/ch·ªã",
      "Thanks anh/ch·ªã",
      "C·∫£m ∆°n shop nhi·ªÅu"
    ],
    closings: [
      "C·∫£m ∆°n anh/ch·ªã.",
      "S·∫Ω ·ªßng h·ªô shop ti·∫øp.",
      "Recommend shop cho b·∫°n b√®."
    ]
  },
  neutral: {
    openings: [
      "Ch√†o b·∫°n,",
      "Hi,",
      "Xin ch√†o,"
    ],
    appreciations: [
      "C·∫£m ∆°n",
      "Thanks",
      "C·∫£m ∆°n b·∫°n"
    ],
    closings: [
      "C·∫£m ∆°n.",
      "Good.",
      "Ok."
    ]
  },
  direct: {
    openings: [
      "Xin ch√†o,",
      "Hi,"
    ],
    appreciations: [
      "Ok",
      "T·ªët",
      "C·∫£m ∆°n"
    ],
    closings: [
      "T·∫°m ·ªïn.",
      "Ok.",
      "Good."
    ]
  }
};

// Book Category Specific Terminology
export const BOOK_CATEGORY_TERMS = {
  "textbook": {
    vi: "s√°ch gi√°o khoa",
    terms: ["b√†i t·∫≠p", "ki·∫øn th·ª©c", "h·ªçc t·∫≠p", "√¥n thi", "k·ª≥ thi", "m√¥n h·ªçc", "ch∆∞∆°ng tr√¨nh", "b√†i h·ªçc"],
    contexts: ["ƒë·ªÉ h·ªçc", "cho vi·ªác √¥n thi", "ph·ª•c v·ª• h·ªçc t·∫≠p", "chu·∫©n b·ªã k·ª≥ thi"],
    reasons: ["h·ªçc t·∫≠p", "√¥n thi", "l√†m b√†i t·∫≠p", "chu·∫©n b·ªã thi"]
  },
  "literature": {
    vi: "vƒÉn h·ªçc",
    terms: ["t√°c ph·∫©m", "vƒÉn ch∆∞∆°ng", "ti·ªÉu thuy·∫øt", "th∆° ca", "truy·ªán", "c·∫£m x√∫c", "t√¢m h·ªìn"],
    contexts: ["ƒë·ªÉ ƒë·ªçc", "th∆∞ gi√£n", "gi·∫£i tr√≠", "t√¨m hi·ªÉu"],
    reasons: ["y√™u th√≠ch", "s∆∞u t·∫≠p", "ƒë·ªçc gi·∫£i tr√≠", "nghi√™n c·ª©u"]
  },
  "children": {
    vi: "s√°ch thi·∫øu nhi", 
    terms: ["tranh ·∫£nh", "m√†u s·∫Øc", "b√©", "con", "h·ªçc", "vui nh·ªôn", "d·ªÖ th∆∞∆°ng"],
    contexts: ["cho con", "t·∫∑ng b√©", "d·∫°y con", "ƒë·ªçc c√πng con"],
    reasons: ["mua cho con", "t·∫∑ng ch√°u", "gi√°o d·ª•c", "ph√°t tri·ªÉn tr√≠ tu·ªá"]
  },
  "business": {
    vi: "kinh doanh",
    terms: ["qu·∫£n l√Ω", "kinh nghi·ªám", "chi·∫øn l∆∞·ª£c", "th√†nh c√¥ng", "kinh doanh", "ƒë·∫ßu t∆∞"],
    contexts: ["ƒë·ªÉ h·ªçc h·ªèi", "√°p d·ª•ng c√¥ng vi·ªác", "ph√°t tri·ªÉn b·∫£n th√¢n"],
    reasons: ["h·ªçc h·ªèi", "c√¥ng vi·ªác", "kh·ªüi nghi·ªáp", "n√¢ng cao ki·∫øn th·ª©c"]
  },
  "health": {
    vi: "s·ª©c kh·ªèe",
    terms: ["chƒÉm s√≥c", "dinh d∆∞·ª°ng", "t·∫≠p luy·ªán", "kh·ªèe m·∫°nh", "b·ªánh t·∫≠t", "ph√≤ng ng·ª´a"],
    contexts: ["ƒë·ªÉ chƒÉm s√≥c s·ª©c kh·ªèe", "t√¨m hi·ªÉu", "√°p d·ª•ng"],
    reasons: ["quan t√¢m s·ª©c kh·ªèe", "chƒÉm s√≥c gia ƒë√¨nh", "ph√≤ng b·ªánh"]
  }
};

// Vietnamese Cultural Review Elements
export const CULTURAL_ELEMENTS = {
  family_mentions: [
    "mua cho con",
    "t·∫∑ng b·ªë m·∫π",
    "c·∫£ gia ƒë√¨nh ƒë·ªÅu th√≠ch",
    "con em r·∫•t th√≠ch",
    "b·ªë m·∫π khen",
    "anh ch·ªã trong nh√†",
    "ƒë·ªçc c√πng gia ƒë√¨nh"
  ],
  gifting_context: [
    "mua l√†m qu√†",
    "t·∫∑ng sinh nh·∫≠t",
    "qu√† t·∫øt",
    "qu√† 8/3",
    "qu√† 20/10",
    "qu√† t·ªët nghi·ªáp",
    "qu√† khai tr∆∞·ªùng"
  ],
  study_references: [
    "chu·∫©n b·ªã thi",
    "h·ªçc th√™m",
    "√¥n b√†i",
    "l√†m b√†i t·∫≠p",
    "nghi√™n c·ª©u",
    "tham kh·∫£o",
    "b·ªï sung ki·∫øn th·ª©c"
  ],
  packaging_appreciation: [
    "ƒë√≥ng g√≥i c·∫©n th·∫≠n",
    "bao b√¨ ƒë·∫πp",
    "g√≥i h√†ng t·ªët",
    "ƒë√≥ng g√≥i ch·∫Øc ch·∫Øn",
    "b·ªçc k·ªπ",
    "giao h√†ng an to√†n"
  ],
  festival_seasons: [
    "m√πa t·∫øt",
    "ƒë·∫ßu nƒÉm h·ªçc",
    "cu·ªëi nƒÉm",
    "m√πa thi",
    "ngh·ªâ h√®",
    "trung thu",
    "gi√°ng sinh"
  ],
  vietnamese_values: [
    "t√¥n tr·ªçng kh√°ch h√†ng",
    "chu ƒë√°o",
    "nhi·ªát t√¨nh",
    "t·∫≠n t√¢m",
    "uy t√≠n",
    "ƒë√°ng tin c·∫≠y",
    "ch·∫•t l∆∞·ª£ng cam k·∫øt"
  ]
};

// Review Quality Templates
export const REVIEW_TEMPLATES = {
  excellent: {
    ratings: { min: 5, max: 5, typical: 5 },
    titles: {
      "Mi·ªÅn B·∫Øc": [
        "S√°ch ch·∫•t l∆∞·ª£ng tuy·ªát v·ªùi, d·ªãch v·ª• t·∫≠n t√¢m",
        "R·∫•t h√†i l√≤ng v·ªõi ch·∫•t l∆∞·ª£ng s√°ch v√† giao h√†ng",
        "Shop uy t√≠n, s√°ch ƒë√∫ng m√¥ t·∫£, giao nhanh",
        "Ch·∫•t l∆∞·ª£ng xu·∫•t s·∫Øc, ƒë√≥ng g√≥i c·∫©n th·∫≠n"
      ],
      "Mi·ªÅn Trung": [
        "S√°ch hay, shop chu ƒë√°o, r·∫•t ƒë√°ng tin c·∫≠y",
        "Ch·∫•t l∆∞·ª£ng tuy·ªát v·ªùi, ph·ª•c v·ª• t·∫≠n t√¨nh",
        "S√°ch ƒë·∫πp, giao nhanh, shop uy t√≠n l·∫Øm",
        "R·∫•t h√†i l√≤ng, s·∫Ω ti·∫øp t·ª•c ·ªßng h·ªô shop"
      ],
      "Mi·ªÅn Nam": [
        "S√°ch ok, ship nhanh, gi√° h·ª£p l√Ω",
        "Quality t·ªët, service ok, recommend",
        "S√°ch ƒë·∫πp, ƒë√≥ng g√≥i c·∫©n th·∫≠n, ship nhanh",
        "H√†i l√≤ng v·ªõi ch·∫•t l∆∞·ª£ng v√† d·ªãch v·ª•"
      ]
    },
    content_templates: {
      "Mi·ªÅn B·∫Øc": [
        "Em ƒë√£ mua {book_category} t·∫°i shop v√† r·∫•t h√†i l√≤ng. {book_specific_comment} S√°ch ƒë∆∞·ª£c ƒë√≥ng g√≥i r·∫•t c·∫©n th·∫≠n, giao h√†ng nhanh ch√≥ng. {seller_appreciation} Shop r·∫•t t·∫≠n t√¢m v√† chuy√™n nghi·ªáp. {family_context} Em s·∫Ω ti·∫øp t·ª•c ·ªßng h·ªô shop. {courtesy_closing}",
        
        "T√¥i ƒë·∫∑t mua {book_category} {purchase_reason} v√† nh·∫≠n ƒë∆∞·ª£c s·∫£n ph·∫©m ƒë√∫ng nh∆∞ mong ƒë·ª£i. {book_quality_comment} ƒê·∫∑c bi·ªát, {positive_surprise}. Shop ph·ª•c v·ª• r·∫•t chu ƒë√°o v√† nhi·ªát t√¨nh. {recommendation} C·∫£m ∆°n shop r·∫•t nhi·ªÅu!"
      ],
      "Mi·ªÅn Trung": [
        "T√¥i r·∫•t h√†i l√≤ng khi mua {book_category} t·∫°i shop. {book_specific_comment} Shop ƒë√≥ng g√≥i r·∫•t c·∫©n th·∫≠n v√† giao h√†ng ƒë√∫ng h·∫πn. {cultural_appreciation} {family_context} ƒê√¢y th·ª±c s·ª± l√† m·ªôt shop ƒë√°ng tin c·∫≠y. {courtesy_closing}",
        
        "S√°ch {book_category} m√† t√¥i ƒë·∫∑t mua c√≥ ch·∫•t l∆∞·ª£ng tuy·ªát v·ªùi. {book_quality_comment} {seller_service_praise} Shop r·∫•t t·∫≠n t√¢m v√† chu ƒë√°o. {seasonal_context} T√¥i s·∫Ω gi·ªõi thi·ªáu shop cho b·∫°n b√® v√† ng∆∞·ªùi th√¢n. C·∫£m ∆°n shop!"
      ],
      "Mi·ªÅn Nam": [
        "M√¨nh order {book_category} ·ªü shop, nh·∫≠n ƒë∆∞·ª£c h√†ng r·∫•t ok. {book_specific_comment} Ship nhanh, ƒë√≥ng g√≥i c·∫©n th·∫≠n. {practical_benefit} {family_context} Shop service t·ªët, recommend cho m·ªçi ng∆∞·ªùi. Thanks shop!",
        
        "S√°ch {book_category} quality t·ªët, ƒë√∫ng nh∆∞ m√¥ t·∫£. {book_quality_comment} {delivery_praise} Shop t∆∞ v·∫•n nhi·ªát t√¨nh, response nhanh. {recommendation} S·∫Ω mua ti·∫øp ·ªü shop. Good job!"
      ]
    }
  },
  
  good: {
    ratings: { min: 4, max: 4, typical: 4 },
    titles: {
      "Mi·ªÅn B·∫Øc": [
        "S√°ch t·ªët, d·ªãch v·ª• ·ªïn, h√†i l√≤ng",
        "Ch·∫•t l∆∞·ª£ng t·ªët, giao h√†ng ƒë√∫ng h·∫πn",
        "Shop uy t√≠n, s√°ch ƒë·∫πp, giao nhanh",
        "H√†i l√≤ng v·ªõi s·∫£n ph·∫©m v√† d·ªãch v·ª•"
      ],
      "Mi·ªÅn Trung": [
        "S√°ch hay, shop chu ƒë√°o, t·ªët l·∫Øm",
        "Ch·∫•t l∆∞·ª£ng t·ªët, ph·ª•c v·ª• t·∫≠n t√¨nh",
        "S√°ch ƒë·∫πp, shop uy t√≠n, h√†i l√≤ng",
        "T·ªët, s·∫Ω ·ªßng h·ªô shop ti·∫øp"
      ],
      "Mi·ªÅn Nam": [
        "S√°ch ok, ship ·ªïn, good",
        "Quality t·ªët, service ok", 
        "S√°ch ƒë·∫πp, giao nhanh, t·ªët",
        "·ªîn, recommend shop"
      ]
    },
    content_templates: {
      "Mi·ªÅn B·∫Øc": [
        "Em mua {book_category} t·∫°i shop, nh·∫≠n ƒë∆∞·ª£c s·∫£n ph·∫©m t·ªët. {book_specific_comment} Giao h√†ng ƒë√∫ng th·ªùi gian, ƒë√≥ng g√≥i c·∫©n th·∫≠n. {minor_improvement} Nh√¨n chung em h√†i l√≤ng v·ªõi shop. {family_context} S·∫Ω ·ªßng h·ªô shop ti·∫øp. C·∫£m ∆°n!",
        
        "S√°ch {book_category} c√≥ ch·∫•t l∆∞·ª£ng t·ªët, ƒë√∫ng m√¥ t·∫£. {book_quality_comment} Shop giao h√†ng nhanh v√† chu ƒë√°o. {positive_aspect} {small_suggestion} Nh√¨n chung r·∫•t h√†i l√≤ng. Recommend shop cho m·ªçi ng∆∞·ªùi."
      ],
      "Mi·ªÅn Trung": [
        "T√¥i ƒë·∫∑t mua {book_category} v√† nh·∫≠n ƒë∆∞·ª£c s·∫£n ph·∫©m t·ªët. {book_specific_comment} Shop ph·ª•c v·ª• t·∫≠n t√¨nh, giao h√†ng ƒë√∫ng h·∫πn. {cultural_element} {minor_note} T√¥i h√†i l√≤ng v·ªõi shop. C·∫£m ∆°n shop!",
        
        "S√°ch {book_category} ch·∫•t l∆∞·ª£ng t·ªët, shop t∆∞ v·∫•n nhi·ªát t√¨nh. {book_quality_comment} {delivery_comment} {positive_experience} {small_improvement} S·∫Ω ti·∫øp t·ª•c ·ªßng h·ªô shop. Ch√∫c shop ph√°t tri·ªÉn!"
      ],
      "Mi·ªÅn Nam": [
        "M√¨nh order {book_category}, nh·∫≠n h√†ng ok. {book_specific_comment} Ship nhanh, ƒë√≥ng g√≥i t·ªët. {practical_comment} {minor_point} Overall satisfy v·ªõi shop. Thanks!",
        
        "S√°ch {book_category} quality t·ªët, ƒë√∫ng m√¥ t·∫£. {book_quality_comment} {delivery_experience} Shop response nhanh, service ok. {small_suggestion} Good shop, recommend."
      ]
    }
  },
  
  average: {
    ratings: { min: 3, max: 3, typical: 3 },
    titles: {
      "Mi·ªÅn B·∫Øc": [
        "S√°ch ·ªïn, c√≥ th·ªÉ c·∫£i thi·ªán th√™m",
        "T·∫°m ·ªïn, c·∫ßn c·∫£i thi·ªán m·ªôt s·ªë ƒëi·ªÉm",
        "B√¨nh th∆∞·ªùng, ch·∫•p nh·∫≠n ƒë∆∞·ª£c",
        "·ªîn, mong shop c·∫£i thi·ªán h∆°n"
      ],
      "Mi·ªÅn Trung": [
        "T·∫°m ·ªïn, shop c·∫ßn c·∫£i thi·ªán",
        "B√¨nh th∆∞·ªùng, mong shop ph√°t tri·ªÉn h∆°n",
        "·ªîn, c√≥ th·ªÉ t·ªët h∆°n",
        "T·∫°m ƒë∆∞·ª£c, c·∫ßn c·∫£i thi·ªán"
      ],
      "Mi·ªÅn Nam": [
        "T·∫°m ok, c√≥ th·ªÉ improve",
        "Average, c·∫ßn c·∫£i thi·ªán",
        "·ªîn, mong shop better",
        "Ok, but can be better"
      ]
    },
    content_templates: {
      "Mi·ªÅn B·∫Øc": [
        "Em mua {book_category} t·∫°i shop. {book_specific_comment} {neutral_comment} {issue_mentioned} Mong shop c√≥ th·ªÉ c·∫£i thi·ªán ƒë·ªÉ ph·ª•c v·ª• kh√°ch h√†ng t·ªët h∆°n. {constructive_feedback} C·∫£m ∆°n shop.",
        
        "S√°ch {book_category} nh√¨n chung ·ªïn. {book_quality_comment} {service_experience} {improvement_area} Hy v·ªçng shop s·∫Ω ch√∫ √Ω h∆°n ƒë·ªÉ n√¢ng cao ch·∫•t l∆∞·ª£ng d·ªãch v·ª•. Thanks shop!"
      ],
      "Mi·ªÅn Trung": [
        "T√¥i ƒë·∫∑t {book_category}, s·∫£n ph·∫©m t·∫°m ·ªïn. {book_specific_comment} {mixed_experience} {polite_criticism} Mong shop c√≥ th·ªÉ c·∫£i thi·ªán ƒë·ªÉ kh√°ch h√†ng h√†i l√≤ng h∆°n. C·∫£m ∆°n shop.",
        
        "S√°ch {book_category} ch·∫•t l∆∞·ª£ng b√¨nh th∆∞·ªùng. {book_quality_comment} {service_comment} {gentle_suggestion} Hy v·ªçng shop s·∫Ω ph√°t tri·ªÉn t·ªët h∆°n trong t∆∞∆°ng lai. Ch√∫c shop th√†nh c√¥ng!"
      ],
      "Mi·ªÅn Nam": [
        "M√¨nh order {book_category}, t·∫°m ok. {book_specific_comment} {honest_feedback} {improvement_point} Hope shop improve ƒë·ªÉ better h∆°n. Thanks!",
        
        "S√°ch {book_category} average. {book_quality_comment} {service_feedback} {suggestion} Shop c·∫ßn c·∫£i thi·ªán ƒë·ªÉ compete t·ªët h∆°n. Good luck!"
      ]
    }
  },
  
  poor: {
    ratings: { min: 1, max: 2, typical: 2 },
    titles: {
      "Mi·ªÅn B·∫Øc": [
        "Kh√¥ng h√†i l√≤ng, c·∫ßn c·∫£i thi·ªán nhi·ªÅu",
        "Ch∆∞a ƒë·∫°t k·ª≥ v·ªçng, mong shop c·∫£i thi·ªán", 
        "C√≥ v·∫•n ƒë·ªÅ, mong shop kh·∫Øc ph·ª•c",
        "Ch∆∞a t·ªët, c·∫ßn c·∫£i thi·ªán"
      ],
      "Mi·ªÅn Trung": [
        "Ch∆∞a h√†i l√≤ng, mong shop c·∫£i thi·ªán",
        "C√≥ v·∫•n ƒë·ªÅ, c·∫ßn kh·∫Øc ph·ª•c",
        "Ch∆∞a ƒë·∫°t k·ª≥ v·ªçng c·ªßa kh√°ch",
        "C·∫ßn c·∫£i thi·ªán nhi·ªÅu h∆°n"
      ],
      "Mi·ªÅn Nam": [
        "Kh√¥ng ok, c·∫ßn improve",
        "C√≥ problem, c·∫ßn fix",
        "Not good, c·∫ßn c·∫£i thi·ªán",
        "Poor quality, c·∫ßn l√†m better"
      ]
    },
    content_templates: {
      "Mi·ªÅn B·∫Øc": [
        "Em ƒë·∫∑t mua {book_category} nh∆∞ng {specific_issue}. {detailed_problem} {polite_complaint} Mong shop c√≥ th·ªÉ kh·∫Øc ph·ª•c ƒë·ªÉ ph·ª•c v·ª• kh√°ch h√†ng t·ªët h∆°n. {constructive_criticism} Em hy v·ªçng shop s·∫Ω c·∫£i thi·ªán.",
        
        "S√°ch {book_category} kh√¥ng nh∆∞ mong ƒë·ª£i. {quality_issue} {service_problem} {diplomatic_feedback} Mong shop xem x√©t v√† c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng d·ªãch v·ª•. C·∫£m ∆°n shop ƒë√£ l·∫Øng nghe."
      ],
      "Mi·ªÅn Trung": [
        "T√¥i kh√¥ng h√†i l√≤ng v·ªõi {book_category} ƒë√£ mua. {specific_problem} {polite_disappointment} Mong shop c√≥ th·ªÉ c·∫£i thi·ªán ƒë·ªÉ kh√°ch h√†ng h√†i l√≤ng h∆°n. {hopeful_ending} Ch√∫c shop ng√†y c√†ng ph√°t tri·ªÉn.",
        
        "S√°ch {book_category} ch∆∞a ƒë·∫°t k·ª≥ v·ªçng. {quality_concern} {service_issue} {gentle_criticism} Hy v·ªçng shop s·∫Ω ch√∫ √Ω v√† c·∫£i thi·ªán trong t∆∞∆°ng lai. C·∫£m ∆°n shop."
      ],
      "Mi·ªÅn Nam": [
        "M√¨nh order {book_category} but {direct_issue}. {specific_complaint} {straightforward_feedback} Shop c·∫ßn improve ƒë·ªÉ customer satisfy h∆°n. Hope better next time.",
        
        "S√°ch {book_category} kh√¥ng good. {quality_problem} {service_complaint} {honest_criticism} Shop c·∫ßn fix these issues ƒë·ªÉ competitive h∆°n. Thanks!"
      ]
    }
  }
};

// Content Generation Helpers
export const CONTENT_PLACEHOLDERS = {
  book_specific_comment: {
    excellent: [
      "N·ªôi dung s√°ch r·∫•t phong ph√∫ v√† b·ªï √≠ch",
      "Ch·∫•t l∆∞·ª£ng in ·∫•n tuy·ªát v·ªùi, h√¨nh ·∫£nh r√µ n√©t",
      "S√°ch m·ªõi 100%, kh√¥ng c√≥ t√¨ v·∫øt",
      "ƒê√∫ng l√† phi√™n b·∫£n t√¥i c·∫ßn, r·∫•t h√†i l√≤ng"
    ],
    good: [
      "N·ªôi dung s√°ch t·ªët, ph√π h·ª£p nhu c·∫ßu",
      "Ch·∫•t l∆∞·ª£ng in ·∫•n ·ªïn, ƒë·ªçc d·ªÖ",
      "S√°ch c√≤n m·ªõi, t√¨nh tr·∫°ng t·ªët",
      "ƒê√∫ng nh∆∞ m√¥ t·∫£, h√†i l√≤ng"
    ],
    average: [
      "N·ªôi dung s√°ch b√¨nh th∆∞·ªùng",
      "Ch·∫•t l∆∞·ª£ng in ·∫•n t·∫°m ·ªïn",
      "S√°ch c√≥ v·∫øt nhƒÉn nh·∫π nh∆∞ng ch·∫•p nh·∫≠n ƒë∆∞·ª£c",
      "G·∫ßn ƒë√∫ng m√¥ t·∫£"
    ],
    poor: [
      "N·ªôi dung kh√¥ng nh∆∞ k·ª≥ v·ªçng",
      "Ch·∫•t l∆∞·ª£ng in ·∫•n k√©m, m·ªù",
      "S√°ch c√≥ v·∫øt b·∫©n, h∆°i c≈©",
      "Kh√¥ng ƒë√∫ng ho√†n to√†n nh∆∞ m√¥ t·∫£"
    ]
  },
  
  seller_appreciation: {
    excellent: [
      "Shop t∆∞ v·∫•n r·∫•t nhi·ªát t√¨nh v√† chuy√™n nghi·ªáp",
      "Nh√¢n vi√™n shop ph·ª•c v·ª• t·∫≠n t√¢m v√† chu ƒë√°o",
      "Shop response nhanh, gi·∫£i ƒë√°p m·ªçi th·∫Øc m·∫Øc",
      "C·∫£m nh·∫≠n ƒë∆∞·ª£c s·ª± t·∫≠n t√¨nh c·ªßa shop"
    ],
    good: [
      "Shop t∆∞ v·∫•n t·ªët, nhi·ªát t√¨nh",
      "Nh√¢n vi√™n shop ph·ª•c v·ª• ·ªïn",
      "Shop tr·∫£ l·ªùi nhanh, t·ªët",
      "Shop kh√° chu ƒë√°o"
    ],
    average: [
      "Shop t∆∞ v·∫•n b√¨nh th∆∞·ªùng",
      "Nh√¢n vi√™n shop ph·ª•c v·ª• t·∫°m ·ªïn",
      "Shop tr·∫£ l·ªùi ch·∫≠m m·ªôt ch√∫t",
      "Shop c·∫ßn c·∫£i thi·ªán th√°i ƒë·ªô"
    ],
    poor: [
      "Shop t∆∞ v·∫•n ch∆∞a t·ªët",
      "Nh√¢n vi√™n shop ch∆∞a nhi·ªát t√¨nh",
      "Shop response ch·∫≠m",
      "Shop c·∫ßn c·∫£i thi·ªán c√°ch ph·ª•c v·ª•"
    ]
  }
};

// Generate Vietnamese reviewer profiles
export function generateVietnameseReviewerProfile(region: string): any {
  const nameData = generateVietnameseName();
  const addressData = generateVietnameseAddress();
  
  const occupations = [
    "h·ªçc sinh", "sinh vi√™n", "gi√°o vi√™n", "nh√¢n vi√™n vƒÉn ph√≤ng", 
    "kinh doanh", "k·∫ø to√°n", "y t√°", "k·ªπ s∆∞", "lu·∫≠t s∆∞", "b√°c sƒ©",
    "n·ªôi tr·ª£", "freelancer", "designer", "marketing", "b√°n h√†ng"
  ];
  
  const readingHabits = [
    "ƒë·ªçc s√°ch h·ªçc t·∫≠p", "ƒë·ªçc ti·ªÉu thuy·∫øt", "ƒë·ªçc s√°ch kinh doanh",
    "ƒë·ªçc s√°ch thi·∫øu nhi", "ƒë·ªçc s√°ch k·ªπ nƒÉng", "ƒë·ªçc truy·ªán tranh",
    "ƒë·ªçc s√°ch tham kh·∫£o", "ƒë·ªçc s√°ch t√¥n gi√°o", "ƒë·ªçc s√°ch n·∫•u ƒÉn"
  ];
  
  return {
    name: nameData.fullName,
    age: Math.floor(Math.random() * 50) + 18, // 18-67 years old
    gender: nameData.gender,
    occupation: occupations[Math.floor(Math.random() * occupations.length)],
    readingHabits: [
      readingHabits[Math.floor(Math.random() * readingHabits.length)],
      readingHabits[Math.floor(Math.random() * readingHabits.length)]
    ],
    region: region,
    reviewCount: Math.floor(Math.random() * 20) + 1 // 1-20 reviews
  };
}

// Generate Vietnamese book context
export function generateBookContext(category: string): any {
  const bookTitles = {
    textbook: [
      "To√°n h·ªçc l·ªõp 12", "V·∫≠t l√Ω ƒë·∫°i c∆∞∆°ng", "H√≥a h·ªçc h·ªØu c∆°", 
      "Ti·∫øng Anh TOEIC", "Ng·ªØ vƒÉn l·ªõp 11", "L·ªãch s·ª≠ Vi·ªát Nam"
    ],
    literature: [
      "S·ªë ƒë·ªè", "Ch√≠ Ph√®o", "D·∫ø M√®n phi√™u l∆∞u k√Ω", "T√¥i th·∫•y hoa v√†ng tr√™n c·ªè xanh",
      "Nh√† gi·∫£ kim", "T·∫Øt ƒë√®n", "Truy·ªán Ki·ªÅu"
    ],
    children: [
      "Doraemon", "Conan", "Th·∫ßn ƒë·ªìng ƒë·∫•t Vi·ªát", "Truy·ªán c·ªï t√≠ch Vi·ªát Nam",
      "Nh·ªØng c√¢u chuy·ªán v·ªÅ ƒë·ªông v·∫≠t", "S√°ch t√¥ m√†u"
    ],
    business: [
      "ƒê·∫Øc nh√¢n t√¢m", "Think and Grow Rich", "7 th√≥i quen hi·ªáu qu·∫£",
      "Kh·ªüi nghi·ªáp th√¥ng minh", "Qu·∫£n tr·ªã marketing", "ƒê·∫ßu t∆∞ ch·ª©ng kho√°n"
    ],
    health: [
      "C·∫©m nang s·ª©c kh·ªèe gia ƒë√¨nh", "Dinh d∆∞·ª°ng h√†ng ng√†y", "Yoga c∆° b·∫£n",
      "ChƒÉm s√≥c s·ª©c kh·ªèe t·ª± nhi√™n", "Ph√≤ng ch·ªëng b·ªánh t·∫≠t"
    ]
  };
  
  const authors = [
    "Nguy·ªÖn Nh·∫≠t √Ånh", "T√¥ Ho√†i", "Nguy·ªÖn Du", "Nam Cao", "V≈© Tr·ªçng Ph·ª•ng",
    "Paulo Coelho", "Napoleon Hill", "Dale Carnegie", "Stephen Covey"
  ];
  
  const conditions = ["new", "like_new", "good", "fair"];
  const reasons = BOOK_CATEGORY_TERMS[category]?.reasons || ["ƒë·ªçc", "h·ªçc t·∫≠p", "tham kh·∫£o"];
  
  const categoryTitles = bookTitles[category] || bookTitles.literature;
  
  return {
    bookTitle: categoryTitles[Math.floor(Math.random() * categoryTitles.length)],
    bookAuthor: authors[Math.floor(Math.random() * authors.length)],
    bookCategory: BOOK_CATEGORY_TERMS[category]?.vi || category,
    bookCondition: conditions[Math.floor(Math.random() * conditions.length)],
    purchaseReason: reasons[Math.floor(Math.random() * reasons.length)],
    isbn: `978${Math.floor(Math.random() * 9000000000) + 1000000000}`
  };
}

// Generate Vietnamese review characteristics
export function generateReviewCharacteristics(): any {
  return {
    mentionsFamily: Math.random() < 0.3,
    mentionsGifting: Math.random() < 0.2,
    mentionsStudy: Math.random() < 0.4,
    usesCourtesyPhrases: Math.random() < 0.8,
    mentionsPackaging: Math.random() < 0.6,
    mentionsFestivalSeason: Math.random() < 0.1,
    usesFormalLanguage: Math.random() < 0.4
  };
}

// Main function to generate Vietnamese review
export function generateVietnameseReview(
  sellerId: string,
  qualityLevel: 'excellent' | 'good' | 'average' | 'poor',
  bookCategory: string = 'literature',
  region: string = 'Mi·ªÅn Nam',
  customOptions?: any
): any {
  const template = REVIEW_TEMPLATES[qualityLevel];
  const reviewerProfile = generateVietnameseReviewerProfile(region);
  const bookContext = generateBookContext(bookCategory);
  const characteristics = generateReviewCharacteristics();
  
  // Select appropriate politeness level based on region and reviewer profile
  let politenessLevel = 'polite';
  if (region === 'Mi·ªÅn Trung' || reviewerProfile.age > 40) {
    politenessLevel = 'very_polite';
  } else if (region === 'Mi·ªÅn Nam' && reviewerProfile.age < 30) {
    politenessLevel = Math.random() < 0.3 ? 'neutral' : 'polite';
  }
  
  // Generate title
  const titles = template.titles[region] || template.titles['Mi·ªÅn Nam'];
  const reviewTitle = titles[Math.floor(Math.random() * titles.length)];
  
  // Generate content
  const contentTemplates = template.content_templates[region] || template.content_templates['Mi·ªÅn Nam'];
  let reviewContent = contentTemplates[Math.floor(Math.random() * contentTemplates.length)];
  
  // Replace placeholders with actual content
  reviewContent = reviewContent
    .replace('{book_category}', bookContext.bookCategory)
    .replace('{book_specific_comment}', CONTENT_PLACEHOLDERS.book_specific_comment[qualityLevel][Math.floor(Math.random() * CONTENT_PLACEHOLDERS.book_specific_comment[qualityLevel].length)])
    .replace('{seller_appreciation}', CONTENT_PLACEHOLDERS.seller_appreciation[qualityLevel][Math.floor(Math.random() * CONTENT_PLACEHOLDERS.seller_appreciation[qualityLevel].length)])
    .replace('{purchase_reason}', bookContext.purchaseReason)
    .replace('{family_context}', characteristics.mentionsFamily ? CULTURAL_ELEMENTS.family_mentions[Math.floor(Math.random() * CULTURAL_ELEMENTS.family_mentions.length)] : '')
    .replace('{courtesy_closing}', COURTESY_EXPRESSIONS[politenessLevel].closings[Math.floor(Math.random() * COURTESY_EXPRESSIONS[politenessLevel].closings.length)]);
  
  // Generate ratings
  const overallRating = Math.floor(Math.random() * (template.ratings.max - template.ratings.min + 1)) + template.ratings.min;
  const ratingVariation = Math.random() < 0.3 ? 1 : 0; // 30% chance of 1-point variation
  
  return {
    sellerId,
    reviewTitle,
    reviewContent: reviewContent.trim(),
    overallRating,
    deliveryRating: Math.max(1, Math.min(5, overallRating + (Math.random() > 0.5 ? ratingVariation : -ratingVariation))),
    bookConditionRating: Math.max(1, Math.min(5, overallRating + (Math.random() > 0.5 ? ratingVariation : -ratingVariation))),
    serviceRating: Math.max(1, Math.min(5, overallRating + (Math.random() > 0.5 ? ratingVariation : -ratingVariation))),
    pricingRating: Math.max(1, Math.min(5, overallRating + (Math.random() > 0.5 ? ratingVariation : -ratingVariation))),
    region,
    languageStyle: region === 'Mi·ªÅn B·∫Øc' ? 'formal' : region === 'Mi·ªÅn Nam' ? 'casual' : 'regional',
    politenessLevel,
    isAutoGenerated: true,
    reviewerProfile,
    bookContext,
    reviewCharacteristics: characteristics,
    sentimentScore: qualityLevel === 'excellent' ? 0.9 + Math.random() * 0.1 : 
                   qualityLevel === 'good' ? 0.7 + Math.random() * 0.2 :
                   qualityLevel === 'average' ? 0.4 + Math.random() * 0.2 :
                   0.1 + Math.random() * 0.3,
    qualityScore: qualityLevel === 'excellent' ? 4.5 + Math.random() * 0.5 :
                 qualityLevel === 'good' ? 3.5 + Math.random() * 0.5 :
                 qualityLevel === 'average' ? 2.5 + Math.random() * 0.5 :
                 1.5 + Math.random() * 0.5,
    reviewAuthenticityScore: 4.0 + Math.random() * 1.0,
    generationMetadata: {
      templateType: qualityLevel,
      variationUsed: region,
      generatedAt: new Date().toISOString(),
      parameters: { bookCategory, region, politenessLevel }
    }
  };
}

// Generate multiple reviews for a seller
export function generateSellerReviews(
  sellerId: string, 
  count: number = 50,
  qualityDistribution?: { excellent: number; good: number; average: number; poor: number },
  options?: any
): any[] {
  const defaultDistribution = { excellent: 0.4, good: 0.35, average: 0.2, poor: 0.05 };
  const distribution = qualityDistribution || defaultDistribution;
  
  const reviews = [];
  const categories = Object.keys(BOOK_CATEGORY_TERMS);
  const regions = Object.keys(REGIONAL_VARIATIONS);
  
  // Generate review counts based on distribution
  const excellentCount = Math.floor(count * distribution.excellent);
  const goodCount = Math.floor(count * distribution.good);
  const averageCount = Math.floor(count * distribution.average);
  const poorCount = count - excellentCount - goodCount - averageCount;
  
  // Generate excellent reviews
  for (let i = 0; i < excellentCount; i++) {
    const category = categories[Math.floor(Math.random() * categories.length)];
    const region = regions[Math.floor(Math.random() * regions.length)];
    reviews.push(generateVietnameseReview(sellerId, 'excellent', category, region, options));
  }
  
  // Generate good reviews
  for (let i = 0; i < goodCount; i++) {
    const category = categories[Math.floor(Math.random() * categories.length)];
    const region = regions[Math.floor(Math.random() * regions.length)];
    reviews.push(generateVietnameseReview(sellerId, 'good', category, region, options));
  }
  
  // Generate average reviews
  for (let i = 0; i < averageCount; i++) {
    const category = categories[Math.floor(Math.random() * categories.length)];
    const region = regions[Math.floor(Math.random() * regions.length)];
    reviews.push(generateVietnameseReview(sellerId, 'average', category, region, options));
  }
  
  // Generate poor reviews
  for (let i = 0; i < poorCount; i++) {
    const category = categories[Math.floor(Math.random() * categories.length)];
    const region = regions[Math.floor(Math.random() * regions.length)];
    reviews.push(generateVietnameseReview(sellerId, 'poor', category, region, options));
  }
  
  // Shuffle reviews to distribute timing
  return reviews.sort(() => Math.random() - 0.5);
}

// Time distribution for reviews (spread across realistic timeframes)
export function generateReviewTimestamps(count: number, periodMonths: number = 6): Date[] {
  const now = new Date();
  const startDate = new Date(now.getTime() - (periodMonths * 30 * 24 * 60 * 60 * 1000));
  
  const timestamps = [];
  
  for (let i = 0; i < count; i++) {
    // Generate random timestamp between start date and now
    const randomTime = startDate.getTime() + Math.random() * (now.getTime() - startDate.getTime());
    timestamps.push(new Date(randomTime));
  }
  
  // Sort chronologically
  return timestamps.sort((a, b) => a.getTime() - b.getTime());
}