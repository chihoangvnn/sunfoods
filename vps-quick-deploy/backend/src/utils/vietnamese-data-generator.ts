/**
 * üáªüá≥ VIETNAMESE DATA GENERATOR
 * Generates realistic Vietnamese customer data for sales automation
 * Includes names, addresses, phone numbers with proper Vietnamese formatting
 */

// Vietnamese family names with frequency weights (most common first)
export const VIETNAMESE_FAMILY_NAMES = [
  { name: "Nguy·ªÖn", weight: 0.4 },      // 40% - Most common
  { name: "Tr·∫ßn", weight: 0.11 },       // 11%
  { name: "L√™", weight: 0.095 },        // 9.5%
  { name: "Ph·∫°m", weight: 0.07 },       // 7%
  { name: "Ho√†ng", weight: 0.055 },     // 5.5%
  { name: "Hu·ª≥nh", weight: 0.05 },      // 5%
  { name: "Phan", weight: 0.045 },      // 4.5%
  { name: "V≈©", weight: 0.04 },         // 4%
  { name: "V√µ", weight: 0.035 },        // 3.5%
  { name: "ƒê·∫∑ng", weight: 0.03 },       // 3%
  { name: "B√πi", weight: 0.025 },       // 2.5%
  { name: "ƒê·ªó", weight: 0.02 },         // 2%
  { name: "H·ªì", weight: 0.015 },        // 1.5%
  { name: "Ng√¥", weight: 0.015 },       // 1.5%
  { name: "D∆∞∆°ng", weight: 0.01 },      // 1%
];

// Vietnamese male given names
export const VIETNAMESE_MALE_NAMES = [
  "Minh", "Ho√†ng", "Nam", "Tu·∫•n", "D≈©ng", "H√πng", "Th√†nh", "ƒê·ª©c", "Quang", "Huy",
  "Kh√¥i", "T√¢n", "Vi·ªát", "B·∫£o", "Long", "Phong", "Thi·ªán", "Kh√°nh", "T√∫", "Hi·∫øu",
  "T√†i", "To√†n", "ƒê·∫°t", "S∆°n", "Ph√∫c", "H·∫£i", "L√¢m", "Ki√™n", "Nghƒ©a", "Vinh",
  "Trung", "Th·ªãnh", "An", "ƒê·∫°ng", "Linh", "T√¢m", "Khang", "Duy", "ƒê√¥ng", "Nh·∫≠t",
  "Thi√™n", "H√†", "Tr√≠", "Ph√°t", "C∆∞·ªùng", "Giang", "Tu·ªá", "ƒêƒÉng", "Gia", "Kh·∫£i"
];

// Vietnamese female given names
export const VIETNAMESE_FEMALE_NAMES = [
  "H∆∞∆°ng", "Linh", "Mai", "Hoa", "Lan", "Thu", "Th·∫£o", "Ng·ªçc", "Trang", "Huy·ªÅn",
  "Ph∆∞∆°ng", "Chi", "Vy", "My", "Th√∫y", "Anh", "H·∫±ng", "Di·ªáu", "Ly", "Xu√¢n",
  "Nh∆∞", "Thanh", "Y·∫øn", "Ki·ªÅu", "H·∫°nh", "Nga", "Dung", "T√¢m", "V√¢n", "Qu·ª≥nh",
  "Ch√¢u", "Giang", "B√≠ch", "Hi·ªÅn", "Oanh", "Tuy·∫øt", "H√†", "Nhung", "Trinh", "H·∫°",
  "Minh", "Th√πy", "Ho√†i", "Loan", "Khuy√™n", "B·∫£o", "Nhi", "Tr√¢m", "An", "Th∆°"
];

// Vietnamese middle names (commonly used)
export const VIETNAMESE_MIDDLE_NAMES = {
  male: ["VƒÉn", "Qu·ªëc", "ƒê√¨nh", "H·ªØu", "Xu√¢n", "Th·∫ø", "C√¥ng", "Minh", "Tu·∫•n", "Thanh"],
  female: ["Th·ªã", "Thanh", "Thu", "Ng·ªçc", "Minh", "Th√∫y", "Di·ªáu", "Xu√¢n", "Ph∆∞∆°ng", "B·∫£o"]
};

// Vietnamese cities with districts and realistic addresses
export const VIETNAMESE_CITIES = {
  "Th√†nh ph·ªë H·ªì Ch√≠ Minh": {
    weight: 0.4, // 40% of automation customers
    districts: [
      "Qu·∫≠n 1", "Qu·∫≠n 2", "Qu·∫≠n 3", "Qu·∫≠n 4", "Qu·∫≠n 5", "Qu·∫≠n 6", "Qu·∫≠n 7", 
      "Qu·∫≠n 8", "Qu·∫≠n 9", "Qu·∫≠n 10", "Qu·∫≠n 11", "Qu·∫≠n 12", "Qu·∫≠n Th·ªß ƒê·ª©c",
      "Qu·∫≠n B√¨nh Th·∫°nh", "Qu·∫≠n G√≤ V·∫•p", "Qu·∫≠n Ph√∫ Nhu·∫≠n", "Qu·∫≠n T√¢n B√¨nh",
      "Qu·∫≠n T√¢n Ph√∫", "Qu·∫≠n B√¨nh T√¢n", "Huy·ªán H√≥c M√¥n", "Huy·ªán C·ªß Chi"
    ],
    streetPrefixes: ["ƒê∆∞·ªùng", "Ph·ªë", "Ng√µ", "H·∫ªm", "S·ªë"],
    commonStreets: [
      "Nguy·ªÖn Hu·ªá", "L√™ L·ª£i", "ƒê·ªìng Kh·ªüi", "Nam K·ª≥ Kh·ªüi Nghƒ©a", "Hai B√† Tr∆∞ng",
      "L√Ω T·ª± Tr·ªçng", "Nguy·ªÖn Du", "Pasteur", "C·ªëng Qu·ª≥nh", "Tr·∫ßn H∆∞ng ƒê·∫°o",
      "ƒêi·ªán Bi√™n Ph·ªß", "Nguy·ªÖn Th·ªã Minh Khai", "V√µ VƒÉn T·∫ßn", "Cao Th·∫Øng"
    ]
  },
  "H√† N·ªôi": {
    weight: 0.25, // 25%
    districts: [
      "Qu·∫≠n Ba ƒê√¨nh", "Qu·∫≠n Ho√†n Ki·∫øm", "Qu·∫≠n Hai B√† Tr∆∞ng", "Qu·∫≠n ƒê·ªëng ƒêa",
      "Qu·∫≠n T√¢y H·ªì", "Qu·∫≠n C·∫ßu Gi·∫•y", "Qu·∫≠n Thanh Xu√¢n", "Qu·∫≠n Ho√†ng Mai",
      "Qu·∫≠n Long Bi√™n", "Qu·∫≠n Nam T·ª´ Li√™m", "Qu·∫≠n B·∫Øc T·ª´ Li√™m", "Qu·∫≠n H√† ƒê√¥ng"
    ],
    streetPrefixes: ["Ph·ªë", "Ng√µ", "ƒê∆∞·ªùng", "S·ªë"],
    commonStreets: [
      "Ho√†n Ki·∫øm", "Tr·∫ßn H∆∞ng ƒê·∫°o", "L√Ω Th∆∞·ªùng Ki·ªát", "B√† Tri·ªáu", "Nguy·ªÖn Du",
      "Tr·∫ßn Ph√∫", "Kim M√£", "Gi·∫£ng V√µ", "L√°ng H·∫°", "Th√°i H√†", "X√£ ƒê√†n",
      "ƒê·ªôi C·∫ßn", "H√†ng B√†i", "Tr√†ng Ti·ªÅn", "ƒêinh Ti√™n Ho√†ng"
    ]
  },
  "ƒê√† N·∫µng": {
    weight: 0.12, // 12%
    districts: [
      "Qu·∫≠n H·∫£i Ch√¢u", "Qu·∫≠n Thanh Kh√™", "Qu·∫≠n S∆°n Tr√†", "Qu·∫≠n Ng≈© H√†nh S∆°n",
      "Qu·∫≠n Li√™n Chi·ªÉu", "Qu·∫≠n C·∫©m L·ªá", "Huy·ªán H√≤a Vang"
    ],
    streetPrefixes: ["ƒê∆∞·ªùng", "Ph·ªë", "Ng√µ"],
    commonStreets: [
      "L√™ Du·∫©n", "Tr·∫ßn Ph√∫", "Nguy·ªÖn VƒÉn Linh", "ƒêi·ªán Bi√™n Ph·ªß", "Ho√†ng Di·ªáu",
      "Bach ƒê·∫±ng", "H√πng V∆∞∆°ng", "L√™ L·ª£i", "Nguy·ªÖn Th·ªã Minh Khai"
    ]
  },
  "H·∫£i Ph√≤ng": {
    weight: 0.08, // 8%
    districts: [
      "Qu·∫≠n H·ªìng B√†ng", "Qu·∫≠n Ng√¥ Quy·ªÅn", "Qu·∫≠n L√™ Ch√¢n", "Qu·∫≠n H·∫£i An",
      "Qu·∫≠n Ki·∫øn An", "Qu·∫≠n ƒê·ªì S∆°n", "Qu·∫≠n D∆∞∆°ng Kinh"
    ],
    streetPrefixes: ["ƒê∆∞·ªùng", "Ph·ªë"],
    commonStreets: [
      "L·∫°ch Tray", "ƒêi·ªán Bi√™n Ph·ªß", "T√¥ Hi·ªáu", "L√™ H·ªìng Phong", "Ho√†ng VƒÉn Th·ª•"
    ]
  },
  "C·∫ßn Th∆°": {
    weight: 0.06, // 6%
    districts: [
      "Qu·∫≠n Ninh Ki·ªÅu", "Qu·∫≠n B√¨nh Th·ªßy", "Qu·∫≠n C√°i RƒÉng", "Qu·∫≠n √î M√¥n",
      "Qu·∫≠n Th·ªët N·ªët"
    ],
    streetPrefixes: ["ƒê∆∞·ªùng", "Ph·ªë"],
    commonStreets: [
      "3 Th√°ng 2", "30 Th√°ng 4", "Nguy·ªÖn VƒÉn C·ª´", "M·∫≠u Th√¢n", "Tr·∫ßn H∆∞ng ƒê·∫°o"
    ]
  },
  "Nha Trang": {
    weight: 0.04, // 4%
    districts: ["TP Nha Trang"],
    streetPrefixes: ["ƒê∆∞·ªùng", "Ph·ªë"],
    commonStreets: [
      "Tr·∫ßn Ph√∫", "Nguy·ªÖn Th·ªã Minh Khai", "L√™ Th√†nh T√¥n", "Ho√†ng Hoa Th√°m"
    ]
  },
  "Hu·∫ø": {
    weight: 0.03, // 3%
    districts: ["TP Hu·∫ø"],
    streetPrefixes: ["ƒê∆∞·ªùng", "Ph·ªë"],
    commonStreets: [
      "L√™ L·ª£i", "Nguy·ªÖn Hu·ªá", "Tr·∫ßn H∆∞ng ƒê·∫°o", "ƒêinh Ti√™n Ho√†ng"
    ]
  },
  "V≈©ng T√†u": {
    weight: 0.02, // 2%
    districts: ["TP V≈©ng T√†u"],
    streetPrefixes: ["ƒê∆∞·ªùng"],
    commonStreets: [
      "Ho√†ng Hoa Th√°m", "L√™ L·ª£i", "Tr∆∞∆°ng C√¥ng ƒê·ªãnh", "Nguy·ªÖn Du"
    ]
  }
};

// Vietnamese phone number patterns
export const PHONE_PATTERNS = {
  mobile: {
    weight: 0.85, // 85% mobile phones
    patterns: [
      { prefix: "+84 9", format: "+84 9XX XXX XXX", networks: ["Mobifone", "Vietnamobile"] },
      { prefix: "+84 8", format: "+84 8XX XXX XXX", networks: ["Vinaphone", "Vietnamobile"] },
      { prefix: "+84 7", format: "+84 7XX XXX XXX", networks: ["Viettel", "Mobifone"] },
      { prefix: "+84 5", format: "+84 5XX XXX XXX", networks: ["Vietnamobile"] },
      { prefix: "+84 3", format: "+84 3XX XXX XXX", networks: ["Vinaphone"] }
    ]
  },
  landline: {
    weight: 0.15, // 15% landline phones
    patterns: [
      { prefix: "+84 28", format: "+84 28 XXXX XXXX", city: "TP.HCM" },
      { prefix: "+84 24", format: "+84 24 XXXX XXXX", city: "H√† N·ªôi" },
      { prefix: "+84 236", format: "+84 236 XXX XXXX", city: "ƒê√† N·∫µng" },
      { prefix: "+84 225", format: "+84 225 XXX XXXX", city: "H·∫£i Ph√≤ng" },
      { prefix: "+84 292", format: "+84 292 XXX XXXX", city: "C·∫ßn Th∆°" }
    ]
  }
};

// Payment methods with Vietnamese preferences
export const PAYMENT_METHODS = [
  { method: "cash", weight: 0.6, nameVN: "Ti·ªÅn m·∫∑t" },
  { method: "bank_transfer", weight: 0.35, nameVN: "Chuy·ªÉn kho·∫£n ng√¢n h√†ng" },
  { method: "debt", weight: 0.05, nameVN: "Ghi n·ª£" }
];

// Utility functions for weighted random selection
function weightedRandom<T extends { weight: number }>(items: T[]): T {
  const totalWeight = items.reduce((sum, item) => sum + item.weight, 0);
  let random = Math.random() * totalWeight;
  
  for (const item of items) {
    random -= item.weight;
    if (random <= 0) {
      return item;
    }
  }
  
  return items[items.length - 1]; // Fallback
}

function randomFromArray<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)];
}

function randomNumber(min: number, max: number): number {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Generate Vietnamese full name
export function generateVietnameseName(gender?: 'male' | 'female'): {
  fullName: string;
  familyName: string;
  middleName: string;
  givenName: string;
  gender: 'male' | 'female';
} {
  const actualGender = gender || (Math.random() > 0.5 ? 'male' : 'female');
  const familyName = weightedRandom(VIETNAMESE_FAMILY_NAMES).name;
  const middleName = randomFromArray(VIETNAMESE_MIDDLE_NAMES[actualGender]);
  const givenName = randomFromArray(
    actualGender === 'male' ? VIETNAMESE_MALE_NAMES : VIETNAMESE_FEMALE_NAMES
  );
  
  const fullName = `${familyName} ${middleName} ${givenName}`;
  
  return {
    fullName,
    familyName,
    middleName,
    givenName,
    gender: actualGender
  };
}

// Generate Vietnamese address
export function generateVietnameseAddress(): {
  fullAddress: string;
  houseNumber: string;
  street: string;
  district: string;
  city: string;
  region: string;
} {
  const city = weightedRandom(Object.entries(VIETNAMESE_CITIES).map(([name, data]) => ({
    name,
    weight: data.weight,
    data
  })));
  
  const cityData = city.data;
  const district = randomFromArray(cityData.districts);
  const streetPrefix = randomFromArray(cityData.streetPrefixes);
  const streetName = randomFromArray(cityData.commonStreets);
  const houseNumber = `${randomNumber(1, 999)}${Math.random() > 0.7 ? `/${randomNumber(1, 50)}` : ''}`;
  
  const street = `${streetPrefix} ${streetName}`;
  const fullAddress = `${houseNumber} ${street}, ${district}, ${city.name}`;
  
  // Determine region
  let region = "Mi·ªÅn Nam";
  if (["H√† N·ªôi", "H·∫£i Ph√≤ng"].includes(city.name)) {
    region = "Mi·ªÅn B·∫Øc";
  } else if (["ƒê√† N·∫µng", "Hu·∫ø"].includes(city.name)) {
    region = "Mi·ªÅn Trung";
  }
  
  return {
    fullAddress,
    houseNumber,
    street,
    district,
    city: city.name,
    region
  };
}

// Generate Vietnamese phone number
export function generateVietnamesePhone(city?: string): {
  phoneNumber: string;
  type: 'mobile' | 'landline';
  network?: string;
  formatted: string;
} {
  const phoneType = Math.random() < PHONE_PATTERNS.mobile.weight ? 'mobile' : 'landline';
  
  if (phoneType === 'mobile') {
    const pattern = randomFromArray(PHONE_PATTERNS.mobile.patterns);
    const network = randomFromArray(pattern.networks);
    
    // Generate the number based on pattern
    let phoneNumber = pattern.prefix;
    const digitsNeeded = pattern.format.split('X').length - 1;
    
    for (let i = 0; i < digitsNeeded; i++) {
      phoneNumber += randomNumber(0, 9).toString();
    }
    
    // Format the number
    const formatted = formatPhoneNumber(phoneNumber, pattern.format);
    
    return {
      phoneNumber,
      type: 'mobile',
      network,
      formatted
    };
  } else {
    // Landline - try to match city if provided
    const cityPatterns = PHONE_PATTERNS.landline.patterns.filter(p => 
      !city || p.city === city || city.includes(p.city) || p.city.includes(city)
    );
    
    const pattern = cityPatterns.length > 0 
      ? randomFromArray(cityPatterns)
      : randomFromArray(PHONE_PATTERNS.landline.patterns);
    
    let phoneNumber = pattern.prefix;
    const digitsNeeded = pattern.format.split('X').length - 1;
    
    for (let i = 0; i < digitsNeeded; i++) {
      phoneNumber += randomNumber(0, 9).toString();
    }
    
    const formatted = formatPhoneNumber(phoneNumber, pattern.format);
    
    return {
      phoneNumber,
      type: 'landline',
      formatted
    };
  }
}

// Format phone number according to pattern
function formatPhoneNumber(number: string, pattern: string): string {
  let formatted = pattern;
  let numberIndex = 0;
  
  for (let i = 0; i < formatted.length; i++) {
    if (formatted[i] === 'X' && numberIndex < number.length) {
      formatted = formatted.substring(0, i) + number[numberIndex] + formatted.substring(i + 1);
      numberIndex++;
    }
  }
  
  return formatted;
}

// Generate customer age based on Vietnamese demographics
export function generateCustomerAge(): {
  age: number;
  ageGroup: string;
  generationVN: string;
} {
  // Age distribution for book buyers in Vietnam
  const ageRanges = [
    { range: [16, 25], weight: 0.25, group: "16-25", generation: "Gen Z" },
    { range: [26, 35], weight: 0.35, group: "26-35", generation: "Millennials" },
    { range: [36, 45], weight: 0.25, group: "36-45", generation: "Gen X" },
    { range: [46, 55], weight: 0.10, group: "46-55", generation: "Boomers" },
    { range: [56, 70], weight: 0.05, group: "56-70", generation: "Silent Gen" }
  ];
  
  const selectedRange = weightedRandom(ageRanges);
  const age = randomNumber(selectedRange.range[0], selectedRange.range[1]);
  
  return {
    age,
    ageGroup: selectedRange.group,
    generationVN: selectedRange.generation
  };
}

// Generate email based on Vietnamese preferences
export function generateVietnameseEmail(name: { familyName: string; givenName: string; gender: 'male' | 'female' }): string {
  const providers = [
    { domain: "gmail.com", weight: 0.6 },
    { domain: "yahoo.com", weight: 0.15 },
    { domain: "hotmail.com", weight: 0.1 },
    { domain: "outlook.com", weight: 0.05 },
    { domain: "vn.edu.vn", weight: 0.03 },
    { domain: "company.vn", weight: 0.07 }
  ];
  
  const provider = weightedRandom(providers);
  
  // Create email username from name
  const removeAccents = (str: string) => {
    return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  };
  
  const familyNameClean = removeAccents(name.familyName).toLowerCase();
  const givenNameClean = removeAccents(name.givenName).toLowerCase();
  
  // Various email patterns used in Vietnam
  const patterns = [
    `${givenNameClean}.${familyNameClean}`,
    `${familyNameClean}.${givenNameClean}`,
    `${givenNameClean}${familyNameClean}`,
    `${givenNameClean}_${familyNameClean}`,
    `${givenNameClean}${randomNumber(1990, 2005)}`,
    `${familyNameClean}${givenNameClean}${randomNumber(10, 99)}`
  ];
  
  const username = randomFromArray(patterns);
  return `${username}@${provider.domain}`;
}

// Generate payment method preference
export function generatePaymentMethod(): {
  method: string;
  nameVN: string;
  preference: number; // 1-5 scale
} {
  const selected = weightedRandom(PAYMENT_METHODS);
  
  return {
    method: selected.method,
    nameVN: selected.nameVN,
    preference: randomNumber(3, 5) // Vietnamese customers generally prefer their chosen method
  };
}

// Generate complete Vietnamese customer data
export interface VietnameseCustomerData {
  // Personal Info
  name: {
    fullName: string;
    familyName: string;
    middleName: string;
    givenName: string;
    gender: 'male' | 'female';
  };
  age: {
    age: number;
    ageGroup: string;
    generationVN: string;
  };
  
  // Contact Info
  email: string;
  phone: {
    phoneNumber: string;
    type: 'mobile' | 'landline';
    network?: string;
    formatted: string;
  };
  
  // Address Info
  address: {
    fullAddress: string;
    houseNumber: string;
    street: string;
    district: string;
    city: string;
    region: string;
  };
  
  // Preferences
  paymentMethod: {
    method: string;
    nameVN: string;
    preference: number;
  };
  
  // Customer Type
  customerType: 'new' | 'repeat' | 'vip';
  customerTier: 'bronze' | 'silver' | 'gold' | 'platinum';
  
  // Metadata
  generatedAt: string;
  source: 'automation';
}

export function generateVietnameseCustomer(preferences?: {
  gender?: 'male' | 'female';
  city?: string;
  customerType?: 'new' | 'repeat' | 'vip';
  ageGroup?: string;
}): VietnameseCustomerData {
  const name = generateVietnameseName(preferences?.gender);
  const age = generateCustomerAge();
  const address = generateVietnameseAddress();
  const phone = generateVietnamesePhone(preferences?.city || address.city);
  const email = generateVietnameseEmail(name);
  const paymentMethod = generatePaymentMethod();
  
  // Determine customer type based on preferences or randomization
  let customerType: 'new' | 'repeat' | 'vip' = preferences?.customerType || 'new';
  if (!preferences?.customerType) {
    const typeWeights = [
      { type: 'new' as const, weight: 0.6 },
      { type: 'repeat' as const, weight: 0.3 },
      { type: 'vip' as const, weight: 0.1 }
    ];
    customerType = weightedRandom(typeWeights).type;
  }
  
  // Determine customer tier based on type and age
  let customerTier: 'bronze' | 'silver' | 'gold' | 'platinum' = 'bronze';
  if (customerType === 'vip') {
    customerTier = Math.random() > 0.5 ? 'gold' : 'platinum';
  } else if (customerType === 'repeat') {
    customerTier = Math.random() > 0.7 ? 'gold' : 'silver';
  } else {
    customerTier = Math.random() > 0.8 ? 'silver' : 'bronze';
  }
  
  return {
    name,
    age,
    email,
    phone,
    address,
    paymentMethod,
    customerType,
    customerTier,
    generatedAt: new Date().toISOString(),
    source: 'automation'
  };
}

// Generate multiple Vietnamese customers
export function generateVietnameseCustomers(count: number, preferences?: {
  cityDistribution?: { [city: string]: number };
  genderRatio?: { male: number; female: number };
  customerTypeRatio?: { new: number; repeat: number; vip: number };
}): VietnameseCustomerData[] {
  const customers: VietnameseCustomerData[] = [];
  
  for (let i = 0; i < count; i++) {
    // Apply distribution preferences if provided
    let customerPrefs: any = {};
    
    if (preferences?.genderRatio) {
      const totalGenderWeight = preferences.genderRatio.male + preferences.genderRatio.female;
      customerPrefs.gender = Math.random() < (preferences.genderRatio.male / totalGenderWeight) ? 'male' : 'female';
    }
    
    if (preferences?.customerTypeRatio) {
      const typeOptions = Object.entries(preferences.customerTypeRatio);
      const totalTypeWeight = typeOptions.reduce((sum, [_, weight]) => sum + weight, 0);
      let random = Math.random() * totalTypeWeight;
      
      for (const [type, weight] of typeOptions) {
        random -= weight;
        if (random <= 0) {
          customerPrefs.customerType = type;
          break;
        }
      }
    }
    
    customers.push(generateVietnameseCustomer(customerPrefs));
  }
  
  return customers;
}

// All functions are already exported individually above