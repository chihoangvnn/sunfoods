import { GoogleGenAI } from "@google/genai";

// Initialize Gemini AI with fail-fast for missing API key
if (!process.env.GEMINI_API_KEY) {
  throw new Error('FATAL: GEMINI_API_KEY environment variable is required but not provided');
}

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });

// Production-ready Gemini configuration - no model initialization needed

// Enhanced error types for better debugging
interface AIGenerationError {
  type: 'API_ERROR' | 'PARSING_ERROR' | 'VALIDATION_ERROR' | 'RATE_LIMIT' | 'AUTHENTICATION' | 'UNKNOWN';
  message: string;
  originalError?: any;
  retryable: boolean;
}

export interface ReviewSeedingRequest {
  productId: string;
  quantity: number;
  ratingDistribution?: {
    star5: number; // percentage
    star4: number; // percentage
    star3: number; // percentage
    star2: number; // percentage
    star1: number; // percentage
  };
  includeImages?: boolean;
  customPrompt?: string;
}

export interface GeneratedReview {
  customerName: string;
  customerAvatar?: string;
  rating: number;
  title: string;
  content: string;
  isVerified: boolean;
  helpfulCount: number;
}

export interface ReviewSeedingResponse {
  success: boolean;
  generated: number;
  reviews: GeneratedReview[];
  productId: string;
  message: string;
  metadata?: {
    summary: {
      requested: number;
      generated: number;
      aiGenerated: number;
      fallbackCount: number;
      errorCount: number;
      successRate: string;
      status: string;
    };
    hasErrors: boolean;
    isPartialSuccess: boolean;
  };
}

export class AIReviewGenerator {
  private vietnameseNames = [
    "Nguy·ªÖn Th·ªã H∆∞∆°ng", "Tr·∫ßn VƒÉn Nam", "L√™ Th·ªã Mai", "Ph·∫°m Minh Tu·∫•n", "Ho√†ng Th·ªã Lan",
    "V√µ VƒÉn ƒê·ª©c", "ƒê·∫∑ng Th·ªã Ng·ªçc", "B√πi Minh Khoa", "ƒê·ªó Th·ªã H·ªìng", "Ng√¥ VƒÉn H√πng",
    "L√Ω Th·ªã Th·∫£o", "V≈© Minh Ch√¢u", "ƒêinh Th·ªã Linh", "Chu VƒÉn S∆°n", "Mai Th·ªã Y·∫øn",
    "T·∫° Minh ƒê·ª©c", "D∆∞∆°ng Th·ªã T√∫", "L∆∞u VƒÉn Th·∫Øng", "Phan Th·ªã Nhung", "T√¥ Minh Ph√∫c",
    "Cao Th·ªã B√≠ch", "L√¢m VƒÉn Ho√†ng", "ƒê√†o Th·ªã Thu", "Tr·ªãnh Minh T√¢m", "H·ªì Th·ªã Li√™n",
    "T·ª´ VƒÉn Quang", "Ki·ªÅu Th·ªã Oanh", "Th√°i Minh ƒê·∫°i", "√în Th·ªã H·∫°nh", "La VƒÉn Kh√¥i",
    "√Çu Th·ªã M·ªπ", "Quan Minh H·∫£i", "∆Øng Th·ªã Ph∆∞·ª£ng", "√çch VƒÉn Long", "·ª∂ Th·ªã Xu√¢n"
  ];

  private getRandomName(): string {
    return this.vietnameseNames[Math.floor(Math.random() * this.vietnameseNames.length)];
  }

  private generateRatingDistribution(quantity: number, distribution?: ReviewSeedingRequest['ratingDistribution']): number[] {
    const defaultDistribution = {
      star5: 45, // 45% are 5-star
      star4: 35, // 35% are 4-star
      star3: 15, // 15% are 3-star
      star2: 4,  // 4% are 2-star
      star1: 1   // 1% are 1-star
    };

    const dist = distribution || defaultDistribution;
    const ratings: number[] = [];

    // Generate ratings based on distribution
    const star5Count = Math.round((quantity * dist.star5) / 100);
    const star4Count = Math.round((quantity * dist.star4) / 100);
    const star3Count = Math.round((quantity * dist.star3) / 100);
    const star2Count = Math.round((quantity * dist.star2) / 100);
    const star1Count = quantity - star5Count - star4Count - star3Count - star2Count;

    // Add ratings to array
    for (let i = 0; i < star5Count; i++) ratings.push(5);
    for (let i = 0; i < star4Count; i++) ratings.push(4);
    for (let i = 0; i < star3Count; i++) ratings.push(3);
    for (let i = 0; i < star2Count; i++) ratings.push(2);
    for (let i = 0; i < star1Count; i++) ratings.push(1);

    // Shuffle the ratings to randomize order
    return ratings.sort(() => Math.random() - 0.5);
  }

  private async generateSingleReview(
    productName: string,
    productDescription: string,
    targetRating: number,
    customPrompt?: string,
    retryCount: number = 0
  ): Promise<GeneratedReview> {
    const maxRetries = 2;
    
    // üéØ SINGLE SMART PROMPT - Mixed Natural Reviews
    const smartPrompt = `B·∫°n l√† chuy√™n gia t·∫°o ƒë√°nh gi√° s·∫£n ph·∫©m th·ª±c t·∫ø cho th·ªã tr∆∞·ªùng Vi·ªát Nam.

üéØ NHI·ªÜM V·ª§: T·∫°o ƒë√°nh gi√° t·ª± nhi√™n, ƒêA D·∫†NG style nh∆∞ ng∆∞·ªùi th·∫≠t:

üìä PH√ÇN B·ªê STYLE (t·ª± ƒë·ªông vary):
‚Ä¢ 70% Reviews ng·∫Øn g·ªçn, b√¨nh th∆∞·ªùng: "S·∫£n ph·∫©m t·ªët", "Giao h√†ng nhanh", "·ªîn"  
‚Ä¢ 20% Reviews c√≥ context: ƒê·ªÅ c·∫≠p 1-2 feature c·ª• th·ªÉ m·ªôt c√°ch casual
‚Ä¢ 10% Reviews c·ª±c ng·∫Øn: "T·ªët", "Ok", "üëç", "·ªîn √°p"

üó£Ô∏è TONE NG∆ØI·ªúI VI·ªÜT:
- Ng√¥n ng·ªØ ƒë·ªùi th∆∞·ªùng, kh√¥ng formal
- Mix t·ª´ "·ªïn", "t·∫°m", "kh√°", "t·ªët", "ok" 
- Th·ªânh tho·∫£ng typo nh·∫π nh∆∞ ng∆∞·ªùi th·∫≠t
- Emoji ƒë√¥i khi (üëç, üòä, ‚ù§Ô∏è)

‚≠ê THEO RATING:
- 5 sao: Positive nh∆∞ng kh√¥ng over-praise
- 4 sao: H√†i l√≤ng, ƒë√¥i khi mention ƒëi·ªÉm c·∫ßn c·∫£i thi·ªán  
- 3 sao: Neutral, "t·∫°m ƒë∆∞·ª£c", "b√¨nh th∆∞·ªùng"
- 1-2 sao: Th·∫•t v·ªçng nh∆∞ng kh√¥ng extreme

üé® OUTPUT MIX: M·ªói l·∫ßn generate t·ª± ƒë·ªông t·∫°o ra c√°c style kh√°c nhau, natural v√† believable.

TH√îNG TIN S·∫¢N PH·∫®M:
- T√™n: ${productName}
- M√¥ t·∫£: ${productDescription}
- Target Rating: ${targetRating}/5 sao

${customPrompt ? `GHI CH√ö: ${customPrompt}\n` : ''}>> T·ª± ƒë·ªông vary style theo ph√¢n b·ªê ƒë√£ n√™u, t·∫°o review natural nh∆∞ ng∆∞·ªùi Vi·ªát th·∫≠t <<`;

    try {
      // Use production-grade API structure with schema enforcement
      const response = await ai.models.generateContent({
        model: "gemini-2.0-flash",
        contents: [{
          role: "user",
          parts: [{
            text: `${smartPrompt}\n\n>> T·∫°o 1 review ${targetRating} sao theo smart prompt tr√™n <<`
          }]
        }],
        config: {
          temperature: 0.7,
          topP: 0.95,
          topK: 40,
          maxOutputTokens: 1024,
          responseMimeType: "application/json",
          responseSchema: {
            type: "object",
            properties: {
              customerName: { 
                type: "string",
                description: "T√™n kh√°ch h√†ng Vi·ªát Nam t·ª± nhi√™n"
              },
              rating: { 
                type: "number",
                description: "S·ªë sao ƒë√°nh gi√° (1-5)"
              },
              title: { 
                type: "string",
                description: "Ti√™u ƒë·ªÅ ng·∫Øn g·ªçn cho ƒë√°nh gi√° (5-15 t·ª´)"
              },
              content: { 
                type: "string",
                description: "N·ªôi dung ƒë√°nh gi√° chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát"
              },
              isVerified: { 
                type: "boolean",
                description: "Tr·∫°ng th√°i x√°c minh kh√°ch h√†ng"
              },
              helpfulCount: { 
                type: "number",
                description: "S·ªë l∆∞·ª£t ƒë√°nh gi√° h·ªØu √≠ch (0-15)"
              }
            },
            required: ["customerName", "rating", "title", "content", "isVerified", "helpfulCount"]
          }
        }
      });

      // Proper response parsing with error handling
      if (!response || !response.candidates || response.candidates.length === 0) {
        throw this.createError('API_ERROR', 'No candidates returned from Gemini API', null, true);
      }

      const candidate = response.candidates[0];
      
      // Check for safety or other finish reasons
      if (candidate.finishReason && candidate.finishReason !== 'STOP') {
        console.warn(`‚ö†Ô∏è Generation finished with reason: ${candidate.finishReason}`);
        if (candidate.finishReason === 'SAFETY') {
          throw this.createError('VALIDATION_ERROR', 'Content blocked by safety filters', candidate.finishReason, false);
        }
      }

      // Extract text content
      const textPart = candidate.content?.parts?.find((part: any) => part.text);
      if (!textPart || !textPart.text) {
        throw this.createError('API_ERROR', 'No text content in response', candidate, true);
      }

      const rawJson = textPart.text.trim();
      console.log(`ü§ñ Generated review JSON (${rawJson.length} chars):`, rawJson.substring(0, 200) + '...');
      
      // Enhanced JSON parsing with better error handling
      let review;
      try {
        // Clean potential markdown formatting
        const cleanJson = rawJson.replace(/```json\n?|```\n?/g, '').trim();
        review = JSON.parse(cleanJson);
      } catch (parseError: any) {
        console.error('üìù Raw response that failed to parse:', rawJson);
        throw this.createError('PARSING_ERROR', `Invalid JSON format: ${parseError?.message || 'Unknown parse error'}`, parseError, false);
      }

      // Comprehensive validation and enhancement
      const validatedReview = this.validateAndEnhanceReview(review, targetRating);
      
      console.log(`‚úÖ Successfully generated review for "${productName}" (${targetRating} stars)`);
      return validatedReview;
      
    } catch (error) {
      const aiError = this.categorizeError(error);
      console.error(`‚ùå Review generation failed (attempt ${retryCount + 1}/${maxRetries + 1}):`, {
        type: aiError.type,
        message: aiError.message,
        retryable: aiError.retryable
      });

      // Enhanced retry logic with adaptive backoff
      if (aiError.retryable && retryCount < maxRetries) {
        // Extract retry-after from 429 responses if available
        const retryAfter = aiError.originalError?.headers?.['retry-after'];
        const baseDelay = (retryCount + 1) * 1000; // Exponential base
        const jitter = Math.random() * 500; // Add jitter to prevent thundering herd
        const adaptiveDelay = retryAfter ? Math.max(parseInt(retryAfter) * 1000, baseDelay) : baseDelay;
        const finalDelay = adaptiveDelay + jitter;
        
        console.log(`üîÑ Retrying review generation (${retryCount + 1}/${maxRetries}) after ${Math.round(finalDelay)}ms...`);
        await new Promise(resolve => setTimeout(resolve, finalDelay));
        return this.generateSingleReview(productName, productDescription, targetRating, customPrompt, retryCount + 1);
      }

      // If all retries exhausted or non-retryable error, throw the categorized error
      throw aiError;
    }
  }

  /**
   * Validate and enhance generated review data
   */
  private validateAndEnhanceReview(review: any, targetRating: number): GeneratedReview {
    // Validate required fields
    if (!review || typeof review !== 'object') {
      throw this.createError('VALIDATION_ERROR', 'Review is not a valid object', review, false);
    }

    const errors = [];
    if (!review.customerName || typeof review.customerName !== 'string') errors.push('customerName');
    if (!review.title || typeof review.title !== 'string') errors.push('title');
    if (!review.content || typeof review.content !== 'string') errors.push('content');
    
    if (errors.length > 0) {
      throw this.createError('VALIDATION_ERROR', `Missing or invalid fields: ${errors.join(', ')}`, review, false);
    }

    // Enhanced review object with fallbacks and validation
    return {
      customerName: review.customerName || this.getRandomName(),
      rating: targetRating, // Always use target rating to ensure accuracy
      title: this.sanitizeText(review.title, 'ƒê√°nh gi√° s·∫£n ph·∫©m', 100),
      content: this.sanitizeText(review.content, 'S·∫£n ph·∫©m ·ªïn, ƒë√°ng gi√° ti·ªÅn.', 1000),
      isVerified: typeof review.isVerified === 'boolean' ? review.isVerified : Math.random() > 0.3,
      helpfulCount: Math.max(0, Math.min(15, 
        typeof review.helpfulCount === 'number' && !isNaN(review.helpfulCount) 
          ? Math.floor(review.helpfulCount) 
          : Math.floor(Math.random() * 16)
      ))
    };
  }

  /**
   * Sanitize and validate text fields
   */
  private sanitizeText(text: string, fallback: string, maxLength: number): string {
    if (!text || typeof text !== 'string') return fallback;
    
    const cleaned = text.trim();
    if (cleaned.length === 0) return fallback;
    if (cleaned.length > maxLength) return cleaned.substring(0, maxLength).trim() + '...';
    
    return cleaned;
  }

  /**
   * Create categorized error with metadata
   */
  private createError(type: AIGenerationError['type'], message: string, originalError?: any, retryable: boolean = false): AIGenerationError {
    return {
      type,
      message,
      originalError,
      retryable
    };
  }

  /**
   * Categorize errors for better handling
   */
  private categorizeError(error: any): AIGenerationError {
    if (error.type && error.message) {
      return error; // Already categorized
    }

    // API-specific error handling
    if (error.status === 503 || error.message?.includes('overloaded')) {
      return this.createError('RATE_LIMIT', 'Gemini API is temporarily overloaded', error, true);
    }
    
    if (error.status === 401 || error.message?.includes('API key')) {
      return this.createError('AUTHENTICATION', 'Invalid or missing Gemini API key', error, false);
    }
    
    if (error.status === 429 || error.message?.includes('rate limit')) {
      return this.createError('RATE_LIMIT', 'Rate limit exceeded', error, true);
    }

    if (error.status >= 500) {
      return this.createError('API_ERROR', 'Gemini API server error', error, true);
    }

    if (error.status >= 400 && error.status < 500) {
      return this.createError('VALIDATION_ERROR', 'Request validation failed', error, false);
    }

    // Parsing errors
    if (error.message?.includes('JSON') || error.message?.includes('parse')) {
      return this.createError('PARSING_ERROR', 'Failed to parse AI response', error, false);
    }

    // Default to unknown error
    return this.createError('UNKNOWN', error.message || 'Unknown error occurred', error, false);
  }

  async generateReviews(request: ReviewSeedingRequest, product: any): Promise<ReviewSeedingResponse> {
    const { productId, quantity, ratingDistribution, customPrompt } = request;

    if (!product) {
      throw new Error('Product not found');
    }

    if (quantity < 1 || quantity > 50) {
      throw new Error('Quantity must be between 1 and 50 reviews');
    }

    // Generate rating distribution
    const ratings = this.generateRatingDistribution(quantity, ratingDistribution);
    
    // Generate reviews in parallel with rate limiting
    const batchSize = 5; // Process 5 reviews at a time to avoid rate limits
    const reviews: GeneratedReview[] = [];
    
    for (let i = 0; i < ratings.length; i += batchSize) {
      const batch = ratings.slice(i, i + batchSize);
      const batchPromises = batch.map(rating => 
        this.generateSingleReview(
          product.name,
          product.description || product.shortDescription || '',
          rating,
          customPrompt
        )
      );

      try {
        const batchResults = await Promise.allSettled(batchPromises);
        
        batchResults.forEach((result, index) => {
          if (result.status === 'fulfilled') {
            reviews.push(result.value);
          } else {
            const error = result.reason;
            const reviewIndex = i + index + 1;
            
            console.error(`‚ùå Review generation ${reviewIndex} failed:`, {
              error: error.message || error,
              type: error.type || 'UNKNOWN',
              retryable: error.retryable || false
            });
            
            // Production-grade partial failure handling - continue processing
            console.warn(`‚ö†Ô∏è Review ${reviewIndex} failed with ${error.type}: ${error.message}`);
            
            // Use fallback for retryable errors, track critical errors
            if (error.type === 'RATE_LIMIT' || error.type === 'API_ERROR') {
              reviews.push(this.createFallbackReview(batch[index], `[${error.type}]`));
            } else {
              // For critical errors, create structured error report but continue
              reviews.push(this.createFallbackReview(batch[index], `[ERROR: ${error.type}]`));
              
              // Track critical errors for monitoring (but don't abort)
              console.error(`üö® Critical error tracked for review ${reviewIndex}:`, {
                type: error.type,
                message: error.message,
                product: product.name,
                targetRating: batch[index]
              });
            }
          }
        });

        // Add jittered delay between batches for better rate limit resilience
        if (i + batchSize < ratings.length) {
          const baseDelay = 1000;
          const jitter = Math.random() * 500; // 0-500ms jitter
          await new Promise(resolve => setTimeout(resolve, baseDelay + jitter));
        }
      } catch (error) {
        console.error(`Batch ${Math.floor(i / batchSize) + 1} failed:`, error);
        throw new Error(`Failed to generate review batch: ${error}`);
      }
    }

    // Production-grade response with detailed error reporting
    const totalGenerated = reviews.length;
    const aiGenerated = reviews.filter(r => !r.title.includes('[Fallback]') && !r.title.includes('[ERROR:')).length;
    const fallbackCount = reviews.filter(r => r.title.includes('[Fallback]') && !r.title.includes('[ERROR:')).length;
    const errorCount = reviews.filter(r => r.title.includes('[ERROR:')).length;
    const successRate = Math.round((aiGenerated / quantity) * 100);

    const summary = {
      requested: quantity,
      generated: totalGenerated,
      aiGenerated,
      fallbackCount,
      errorCount,
      successRate: `${successRate}%`,
      status: successRate >= 80 ? 'excellent' : successRate >= 60 ? 'good' : successRate >= 40 ? 'degraded' : 'poor'
    };

    console.log(`üìä Review Generation Summary:`, summary);

    return {
      success: totalGenerated > 0, // Partial success is still success
      generated: totalGenerated,
      reviews,
      productId,
      message: `Generated ${totalGenerated}/${quantity} Vietnamese reviews: ${aiGenerated} AI-generated, ${fallbackCount} fallback, ${errorCount} errors (${successRate}% success rate)`,
      metadata: {
        summary,
        hasErrors: errorCount > 0,
        isPartialSuccess: totalGenerated < quantity
      }
    };
  }

  /**
   * Create a fallback review when AI generation fails
   */
  private createFallbackReview(rating: number, errorTag: string = '[Fallback]'): GeneratedReview {
    const templates = {
      5: {
        titles: ['S·∫£n ph·∫©m tuy·ªát v·ªùi [Fallback]', 'R·∫•t h√†i l√≤ng [Fallback]', 'Ch·∫•t l∆∞·ª£ng t·ªët [Fallback]'],
        contents: [
          'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng t·ªët, ƒë√°ng ti·ªÅn. S·∫Ω mua l·∫°i l·∫ßn sau.',
          'R·∫•t h√†i l√≤ng v·ªõi s·∫£n ph·∫©m n√†y. Giao h√†ng nhanh, ƒë√≥ng g√≥i c·∫©n th·∫≠n.',
          'Ch·∫•t l∆∞·ª£ng v∆∞·ª£t mong ƒë·ª£i. Gi√° c·∫£ h·ª£p l√Ω, s·∫Ω gi·ªõi thi·ªáu cho b·∫°n b√®.'
        ]
      },
      4: {
        titles: ['S·∫£n ph·∫©m t·ªët [Fallback]', 'Kh√° h√†i l√≤ng [Fallback]', 'ƒê√°ng mua [Fallback]'],
        contents: [
          'S·∫£n ph·∫©m t·ªët, ch·ªâ c√≥ m·ªôt v√†i ƒëi·ªÉm nh·ªè c·∫ßn c·∫£i thi·ªán.',
          'Nh√¨n chung kh√° h√†i l√≤ng. Ch·∫•t l∆∞·ª£ng ·ªïn, giao h√†ng ƒë√∫ng h·∫πn.',
          'ƒê√°ng mua, ph√π h·ª£p v·ªõi gi√° ti·ªÅn. C√≥ th·ªÉ c√¢n nh·∫Øc mua l·∫°i.'
        ]
      },
      3: {
        titles: ['S·∫£n ph·∫©m ·ªïn [Fallback]', 'B√¨nh th∆∞·ªùng [Fallback]', 'C√≥ th·ªÉ d√πng ƒë∆∞·ª£c [Fallback]'],
        contents: [
          'S·∫£n ph·∫©m b√¨nh th∆∞·ªùng, c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë∆∞·ª£c.',
          'Ch·∫•t l∆∞·ª£ng trung b√¨nh, gi√° c·∫£ h·ª£p l√Ω.',
          '·ªîn, kh√¥ng c√≥ g√¨ ƒë·∫∑c bi·ªát nh∆∞ng c≈©ng kh√¥ng t·ªá.'
        ]
      },
      2: {
        titles: ['Ch∆∞a h√†i l√≤ng [Fallback]', 'C√≥ v·∫•n ƒë·ªÅ [Fallback]', 'C·∫ßn c·∫£i thi·ªán [Fallback]'],
        contents: [
          'S·∫£n ph·∫©m c√≥ m·ªôt s·ªë v·∫•n ƒë·ªÅ, ch∆∞a ƒë√°p ·ª©ng mong ƒë·ª£i.',
          'Ch·∫•t l∆∞·ª£ng ch∆∞a t·ªët, c·∫ßn c·∫£i thi·ªán nhi·ªÅu.',
          'Kh√¥ng nh∆∞ m√¥ t·∫£, kh√° th·∫•t v·ªçng v·ªõi s·∫£n ph·∫©m n√†y.'
        ]
      },
      1: {
        titles: ['R·∫•t th·∫•t v·ªçng [Fallback]', 'Kh√¥ng khuy·∫øn kh√≠ch [Fallback]', 'Ch·∫•t l∆∞·ª£ng k√©m [Fallback]'],
        contents: [
          'R·∫•t th·∫•t v·ªçng v·ªõi s·∫£n ph·∫©m n√†y. Ch·∫•t l∆∞·ª£ng k√©m, kh√¥ng ƒë√°ng ti·ªÅn.',
          'Kh√¥ng khuy·∫øn kh√≠ch m·ªçi ng∆∞·ªùi mua. Nhi·ªÅu v·∫•n ƒë·ªÅ c·∫ßn kh·∫Øc ph·ª•c.',
          'Ch·∫•t l∆∞·ª£ng qu√° k√©m, ho√†n to√†n kh√¥ng ƒë√°p ·ª©ng mong ƒë·ª£i.'
        ]
      }
    };

    const template = templates[rating as keyof typeof templates] || templates[3];
    const randomTitle = template.titles[Math.floor(Math.random() * template.titles.length)];
    const randomContent = template.contents[Math.floor(Math.random() * template.contents.length)];

    return {
      customerName: this.getRandomName(),
      rating,
      title: randomTitle.replace('[Fallback]', errorTag),
      content: randomContent,
      isVerified: Math.random() > 0.3,
      helpfulCount: Math.floor(Math.random() * 16)
    };
  }
}

// Export singleton instance
export const aiReviewGenerator = new AIReviewGenerator();