import { GoogleGenAI } from "@google/genai";
import { db } from '../db';
import { productFaqs, faqLibrary } from '@shared/schema';
import { eq, and } from 'drizzle-orm';

// Initialize Gemini AI
const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || "" });

export interface ProductContext {
  id: string;
  name: string;
  description?: string;
  category?: string;
  categoryName?: string;
  ingredients?: string;
  benefits?: string;
  usageInstructions?: string;
  productStory?: string;
}

export interface GeneratedFAQ {
  question: string;
  answer: string;
  priority: 'cao' | 'trung_binh' | 'thap';
  keywords: string[];
  
  // üî• Rich FAQ Data
  category?: string;
  subcategory?: string;
  questionVariations?: {
    primary: string;
    alternatives: string[];
    dialects?: {
      north?: string[];
      central?: string[];
      south?: string[];
    };
  };
  channels?: {
    website?: string;
    mobile?: string;
    social?: {
      facebook?: string;
      instagram?: string;
      tiktok?: string;
    };
    voice_assistant?: {
      question_audio?: string;
      answer_audio?: string;
    };
  };
  keywordWeights?: Array<{
    keyword: string;
    weight: number;
  }>;
  tags?: string[];
  automation?: {
    trigger_conditions?: Array<{
      type: 'keyword_match' | 'context_similarity' | 'user_intent';
      threshold: number;
      keywords?: string[];
    }>;
  };
  upsellSuggestions?: {
    related_products?: Array<{
      product_id: string;
      relevance: number;
      display_text?: string;
    }>;
  };
}

export interface FAQGenerationResult {
  success: boolean;
  productId: string;
  generatedFAQs: GeneratedFAQ[];
  totalGenerated: number;
  savedToDatabase: boolean;
  generationTime: number;
  error?: string;
}

export class AIFAQGenerator {
  /**
   * ü§ñ Auto-generate FAQs for Vietnamese incense business
   * Analyzes product context and creates relevant Q&A pairs
   */
  async generateProductFAQs(productContext: ProductContext): Promise<FAQGenerationResult> {
    const startTime = Date.now();
    
    try {
      console.log(`ü§ñ Starting AI FAQ generation for product: ${productContext.name}`);

      // Generate FAQs using AI
      const generatedFAQs = await this.generateFAQsWithAI(productContext);
      
      // Save to database
      const savedToDatabase = await this.saveFAQsToDatabase(productContext.id, generatedFAQs);
      
      const generationTime = Date.now() - startTime;
      
      console.log(`‚úÖ AI FAQ generation completed in ${generationTime}ms - Generated ${generatedFAQs.length} FAQs`);
      
      return {
        success: true,
        productId: productContext.id,
        generatedFAQs,
        totalGenerated: generatedFAQs.length,
        savedToDatabase,
        generationTime
      };

    } catch (error) {
      console.error('‚ùå AI FAQ generation failed:', error);
      
      return {
        success: false,
        productId: productContext.id,
        generatedFAQs: [],
        totalGenerated: 0,
        savedToDatabase: false,
        generationTime: Date.now() - startTime,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * üß† Generate FAQs using Gemini AI with Vietnamese business context
   */
  private async generateFAQsWithAI(productContext: ProductContext): Promise<GeneratedFAQ[]> {
    const systemPrompt = `B·∫°n l√† chuy√™n gia t∆∞ v·∫•n s·∫£n ph·∫©m tr·∫ßm h∆∞∆°ng v√† n·∫øn th∆°m t·∫°i Vi·ªát Nam.

üèÆ VIETNAMESE INCENSE BUSINESS CONTEXT:
- Kh√°ch h√†ng quan t√¢m: ch·∫•t l∆∞·ª£ng, xu·∫•t x·ª©, c√°ch s·ª≠ d·ª•ng, b·∫£o qu·∫£n
- VƒÉn h√≥a: t√¢m linh, phong th·ªßy, th·ªù c√∫ng t·ªï ti√™n
- M·ªëi quan t√¢m: an to√†n, thi√™n nhi√™n, authentic experience
- Search intent: "c√°ch d√πng", "c√≥ t·ªët kh√¥ng", "bao l√¢u ch√°y", "m√πi th·∫ø n√†o"

üìù NHI·ªÜM V·ª§:
Ph√¢n t√≠ch s·∫£n ph·∫©m "${productContext.name}" v√† t·∫°o 5-7 c√¢u h·ªèi FAQ th·ª±c t·∫ø m√† kh√°ch h√†ng Vi·ªát Nam th∆∞·ªùng h·ªèi.

üéØ CONTENT GUIDELINES (QUAN TR·ªåNG):
‚úÖ FACTUAL: Ch·ªâ n√≥i v·ªÅ s·∫£n ph·∫©m n√†y, kh√¥ng so s√°nh gi√° th·ªã tr∆∞·ªùng
‚úÖ CONCISE: C√¢u tr·∫£ l·ªùi 2-3 c√¢u, ng·∫Øn g·ªçn, ƒë·ªß th√¥ng tin
‚úÖ NO EXAGGERATION: Kh√¥ng d√πng "si√™u", "c·ª±c", "tuy·ªát v·ªùi nh·∫•t", "r·∫ª nh·∫•t"
‚úÖ REALISTIC: Th√¥ng tin c√≥ cƒÉn c·ª©, kh√¥ng claims qu√° l·ªë
‚úÖ PROFESSIONAL: T√¥ng gi·ªçng chuy√™n nghi·ªáp, th√¢n thi·ªán

üìã FAQ CATEGORIES TO COVER:
1. üè∑Ô∏è M√πi h∆∞∆°ng & ƒë·∫∑c ƒëi·ªÉm: "M√πi th·∫ø n√†o? H∆∞∆°ng thanh hay n·ªìng?"
2. üïê C√°ch s·ª≠ d·ª•ng: "D√πng nh∆∞ th·∫ø n√†o? Ch√°y trong bao l√¢u?"
3. üåø Ch·∫•t l∆∞·ª£ng & an to√†n: "C√≥ an to√†n kh√¥ng? Th√†nh ph·∫ßn g√¨?"
4. üì¶ B·∫£o qu·∫£n & l∆∞u tr·ªØ: "C·∫•t gi·ªØ th·∫ø n√†o? H·∫°n s·ª≠ d·ª•ng?"
5. üéØ T√°c d·ª•ng th·ª±c t·∫ø: "C√≥ t√°c d·ª•ng g√¨? D√πng khi n√†o?"

PRODUCT CONTEXT:
- Name: "${productContext.name}"
${productContext.description ? `- Description: "${productContext.description}"` : ''}
${productContext.categoryName ? `- Category: "${productContext.categoryName}"` : ''}
${productContext.ingredients ? `- Ingredients: "${productContext.ingredients}"` : ''}
${productContext.benefits ? `- Benefits: "${productContext.benefits}"` : ''}
${productContext.usageInstructions ? `- Usage: "${productContext.usageInstructions}"` : ''}
${productContext.productStory ? `- Story: "${productContext.productStory}"` : ''}

üî• RICH FAQ GENERATION:
T·∫°o FAQ v·ªõi c·∫•u tr√∫c phong ph√∫ bao g·ªìm:
- Question variations (c√°c c√°ch h·ªèi kh√°c nhau)
- Multi-channel content (web, mobile, social)
- Keyword weights (tr·ªçng s·ªë t·ª´ kh√≥a)
- Automation triggers
- Tags & metadata

Tr·∫£ v·ªÅ JSON array v·ªõi format:`;

    const responseSchema = {
      type: "array",
      items: {
        type: "object",
        properties: {
          question: { type: "string" },
          answer: { type: "string" },
          priority: { 
            type: "string",
            enum: ["cao", "trung_binh", "thap"]
          },
          keywords: {
            type: "array",
            items: { type: "string" }
          },
          // Rich FAQ fields
          category: { type: "string" },
          subcategory: { type: "string" },
          questionVariations: {
            type: "object",
            properties: {
              primary: { type: "string" },
              alternatives: {
                type: "array",
                items: { type: "string" }
              },
              dialects: {
                type: "object",
                properties: {
                  north: { type: "array", items: { type: "string" } },
                  central: { type: "array", items: { type: "string" } },
                  south: { type: "array", items: { type: "string" } }
                }
              }
            }
          },
          channels: {
            type: "object",
            properties: {
              website: { type: "string" },
              mobile: { type: "string" },
              social: {
                type: "object",
                properties: {
                  facebook: { type: "string" },
                  instagram: { type: "string" },
                  tiktok: { type: "string" }
                }
              },
              voice_assistant: {
                type: "object",
                properties: {
                  question_audio: { type: "string" },
                  answer_audio: { type: "string" }
                }
              }
            }
          },
          keywordWeights: {
            type: "array",
            items: {
              type: "object",
              properties: {
                keyword: { type: "string" },
                weight: { type: "number" }
              },
              required: ["keyword", "weight"]
            }
          },
          tags: {
            type: "array",
            items: { type: "string" }
          },
          automation: {
            type: "object",
            properties: {
              trigger_conditions: {
                type: "array",
                items: {
                  type: "object",
                  properties: {
                    type: { type: "string", enum: ["keyword_match", "context_similarity", "user_intent"] },
                    threshold: { type: "number" },
                    keywords: { type: "array", items: { type: "string" } }
                  }
                }
              }
            }
          }
        },
        required: ["question", "answer", "priority", "keywords"]
      }
    };

    try {
      const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        config: {
          systemInstruction: systemPrompt,
          responseMimeType: "application/json",
          responseSchema
        },
        contents: `
        H√£y t·∫°o 5-7 FAQs RICH DATA cho s·∫£n ph·∫©m n√†y theo format sau:

        üìã V√ç D·ª§ RICH FAQ:
        {
          "question": "M√πi h∆∞∆°ng nhang tr·∫ßm nh∆∞ th·∫ø n√†o?",
          "answer": "Nhang tr·∫ßm c√≥ h∆∞∆°ng thi√™n nhi√™n d·ªãu nh·∫π, thanh tho√°t. Lan t·ªèa ƒë·ªÅu trong ph√≤ng 15-20m¬≤ v√† duy tr√¨ 45-60 ph√∫t.",
          "priority": "cao",
          "category": "M√πi & h∆∞∆°ng",
          "subcategory": "M√¥ t·∫£ ƒë·∫∑c tr∆∞ng",
          "questionVariations": {
            "primary": "M√πi h∆∞∆°ng nhang tr·∫ßm nh∆∞ th·∫ø n√†o?",
            "alternatives": ["Th∆°m kh√¥ng?", "H∆∞∆°ng thanh hay n·ªìng?", "M√πi ra sao?"],
            "dialects": {
              "north": ["th∆°m kh√¥ng", "m√πi ra sao"],
              "central": ["th∆°m ko", "m√πi l√†m sao"], 
              "south": ["th∆°m h√¥ng", "m√πi ra l√†m sao"]
            }
          },
          "channels": {
            "website": "Nhang tr·∫ßm c√≥ h∆∞∆°ng thi√™n nhi√™n d·ªãu nh·∫π, thanh tho√°t. Lan t·ªèa ƒë·ªÅu trong ph√≤ng 15-20m¬≤ v√† duy tr√¨ 45-60 ph√∫t.",
            "mobile": "H∆∞∆°ng d·ªãu nh·∫π, lan t·ªèa 15-20m¬≤, duy tr√¨ 45-60 ph√∫t.",
            "social": {
              "facebook": "üå∏ Nhang tr·∫ßm h∆∞∆°ng thi√™n nhi√™n d·ªãu nh·∫π, t·∫°o kh√¥ng gian th∆∞ gi√£n",
              "instagram": "‚ú® Tr·∫ßm h∆∞∆°ng thanh tho√°t üåø #NhangTramHuong",
              "tiktok": "Nhang tr·∫ßm th∆°m d·ªãu! Ai d√πng r·ªìi ƒë·ªÅu khen üòä"
            }
          },
          "keywordWeights": [
            {"keyword": "th∆°m", "weight": 3.0},
            {"keyword": "m√πi", "weight": 2.5},
            {"keyword": "h∆∞∆°ng", "weight": 2.8},
            {"keyword": "d·ªãu", "weight": 2.0}
          ],
          "tags": ["th∆°m", "m√πi", "h∆∞∆°ng", "d·ªãu nh·∫π"],
          "automation": {
            "trigger_conditions": [
              {
                "type": "keyword_match",
                "threshold": 0.8,
                "keywords": ["th∆°m", "m√πi", "h∆∞∆°ng"]
              }
            ]
          },
          "keywords": ["th∆°m", "m√πi", "h∆∞∆°ng", "d·ªãu nh·∫π"]
        }

        üéØ Y√äU C·∫¶U CHI TI·∫æT:
        1. **Category**: Ph√¢n lo·∫°i ch√≠nh (M√πi & h∆∞∆°ng, C√°ch s·ª≠ d·ª•ng, B·∫£o qu·∫£n, T√°c d·ª•ng)
        2. **Question Variations**: T·ªëi thi·ªÉu 3 c√°ch h·ªèi kh√°c nhau + dialect variations
        3. **Multi-channel Content**: Website (full), Mobile (ng·∫Øn), Social (emoji + hashtag)
        4. **Keyword Weights**: Assign tr·ªçng s·ªë 1.0-3.0 cho t·ª´ kh√≥a quan tr·ªçng
        5. **Tags**: 3-5 tags ch√≠nh t·ª´ content
        6. **Automation**: Trigger conditions cho keyword matching

        ‚ö†Ô∏è TU√ÇN TH·ª¶ GUIDELINES:
        - FACTUAL: Ch·ªâ n√≥i v·ªÅ s·∫£n ph·∫©m, kh√¥ng so s√°nh gi√°
        - CONCISE: Answers 2-3 c√¢u, ƒë·ªß th√¥ng tin
        - NO EXAGGERATION: Kh√¥ng "si√™u", "c·ª±c", "tuy·ªát v·ªùi nh·∫•t"
        - PROFESSIONAL: T√¥ng gi·ªçng chuy√™n nghi·ªáp, th√¢n thi·ªán
        `
      });

      const rawJson = response.text;
      
      if (rawJson) {
        try {
          const faqs: GeneratedFAQ[] = JSON.parse(rawJson);
          
          // Validate and clean the results
          const validatedFAQs = faqs
            .filter(faq => faq.question && faq.answer && faq.priority)
            .map(faq => ({
              ...faq,
              question: faq.question.trim(),
              answer: faq.answer.trim(),
              keywords: Array.isArray(faq.keywords) ? faq.keywords.slice(0, 5) : []
            }))
            .slice(0, 10); // Max 10 FAQs

          console.log(`üß† AI generated ${validatedFAQs.length} FAQs for ${productContext.name}`);
          return validatedFAQs;

        } catch (parseError) {
          console.error('Failed to parse AI FAQ response:', parseError);
          throw new Error('Invalid AI response format');
        }
      } else {
        throw new Error('Empty response from Gemini API');
      }

    } catch (error) {
      console.error('AI FAQ generation failed:', error);
      throw new Error(`Failed to generate FAQs: ${error}`);
    }
  }

  /**
   * üíæ Save generated FAQs to database with Rich FAQ Data
   */
  private async saveFAQsToDatabase(productId: string, faqs: GeneratedFAQ[]): Promise<boolean> {
    try {
      console.log(`üíæ Saving ${faqs.length} Rich FAQs to database for product ${productId}`);

      // CRITICAL FIX: Only delete auto-generated FAQs, preserve manual ones
      await db.delete(productFAQs).where(
        and(
          eq(productFAQs.productId, productId),
          eq(productFAQs.isAutoGenerated, true)
        )
      );

      // Save each Rich FAQ directly to product_faqs (no more faq_library dependency)
      for (let i = 0; i < faqs.length; i++) {
        const faq = faqs[i];
        
        // Convert priority from Vietnamese to English for database
        const priorityMap = {
          'cao': 'high' as const,
          'trung_binh': 'medium' as const,
          'thap': 'low' as const
        };

        // üî• Save Rich FAQ Data directly to product_faqs
        const insertData: any = {
          productId,
          // Legacy fields
          question: faq.question,
          answer: faq.answer,
          sortOrder: i,
          isActive: true,
          isAutoGenerated: true,
          
          // üöÄ New Rich FAQ Fields  
          category: faq.category || null,
          subcategory: faq.subcategory || null,
          questionVariations: faq.questionVariations || {},
          channels: faq.channels || {},
          multimediaContent: {}, // Will be populated by form later
          keywordWeights: faq.keywordWeights || {},
          automation: faq.automation || {},
          upsellSuggestions: {}, // Will be populated by form later
          tags: faq.tags || [],
          relatedQuestionIds: []
        };

        await db.insert(productFAQs).values(insertData);
      }

      console.log(`‚úÖ Successfully saved ${faqs.length} Rich FAQs to database`);
      return true;

    } catch (error) {
      console.error('‚ùå Failed to save Rich FAQs to database:', error);
      console.error('Error details:', error);
      return false;
    }
  }

  /**
   * üîÑ Check if product needs FAQ regeneration
   */
  async shouldRegenerateFAQs(productId: string): Promise<boolean> {
    try {
      // Check if product has existing auto-generated FAQs
      const existingFAQs = await db
        .select()
        .from(productFAQs)
        .where(eq(productFAQs.productId, productId))
        .limit(1);

      // Generate if no FAQs exist yet
      return existingFAQs.length === 0;

    } catch (error) {
      console.error('Error checking FAQ regeneration status:', error);
      return false;
    }
  }

  /**
   * üßπ Clean up old auto-generated FAQs
   */
  async cleanupOldFAQs(productId: string): Promise<void> {
    try {
      await db.delete(productFAQs).where(eq(productFAQs.productId, productId));
      console.log(`üßπ Cleaned up old FAQs for product ${productId}`);
    } catch (error) {
      console.error('Error cleaning up old FAQs:', error);
    }
  }
}

// Export singleton instance
export const aiFAQGenerator = new AIFAQGenerator();