import { firebaseStorage } from './firebase-storage';

// Sample data creation for Firebase
export async function createSampleData() {
  try {
    console.log("B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u cho Firebase...");

    // 1. T·∫°o Catalogs (Ngh√†nh h√†ng)
    const fruitCatalogId = await firebaseStorage.createCatalog({
      name: "Tr√°i c√¢y t∆∞∆°i",
      description: "C√°c lo·∫°i tr√°i c√¢y t∆∞∆°i ngon, ch·∫•t l∆∞·ª£ng cao",
      isActive: true,
      sortOrder: 1
    });

    const jewelryCatalogId = await firebaseStorage.createCatalog({
      name: "Trang s·ª©c phong th·ªßy",
      description: "V√≤ng tay, d√¢y chuy·ªÅn phong th·ªßy ch·∫•t l∆∞·ª£ng",
      isActive: true,
      sortOrder: 2
    });

    const vegetableCatalogId = await firebaseStorage.createCatalog({
      name: "Rau c·ªß qu·∫£",
      description: "Rau c·ªß qu·∫£ t∆∞∆°i s·∫°ch, an to√†n",
      isActive: true,
      sortOrder: 3
    });

    console.log("‚úì ƒê√£ t·∫°o catalogs");

    // 2. T·∫°o Sub-catalogs (Danh m·ª•c con)
    const appleCategoryId = await firebaseStorage.createSubCatalog({
      name: "T√°o c√°c lo·∫°i",
      description: "T√°o nh·∫≠p kh·∫©u v√† trong n∆∞·ªõc",
      catalogId: fruitCatalogId,
      isActive: true,
      sortOrder: 1
    });

    const braceletCategoryId = await firebaseStorage.createSubCatalog({
      name: "V√≤ng tay tr·∫ßm h∆∞∆°ng",
      description: "V√≤ng tay tr·∫ßm h∆∞∆°ng thi√™n nhi√™n",
      catalogId: jewelryCatalogId,
      isActive: true,
      sortOrder: 1
    });

    const leafyVegCategoryId = await firebaseStorage.createSubCatalog({
      name: "Rau l√° xanh",
      description: "C√°c lo·∫°i rau l√° t∆∞∆°i",
      catalogId: vegetableCatalogId,
      isActive: true,
      sortOrder: 1
    });

    console.log("‚úì ƒê√£ t·∫°o sub-catalogs");

    // 3. T·∫°o Products (S·∫£n ph·∫©m)
    
    // T√°o
    const appleProductId = await firebaseStorage.createProduct({
      name: "T√°o Fuji",
      description: "T√°o Fuji nh·∫≠p kh·∫©u t·ª´ Nh·∫≠t B·∫£n, gi√≤n ng·ªçt, size ƒë·ªÅu",
      catalogId: fruitCatalogId,
      subCatalogId: appleCategoryId,
      basePrice: 150000,
      unit: "kg",
      minOrderQuantity: 0.5,
      isActive: true,
      images: [
        "https://example.com/apple-fuji-1.jpg",
        "https://example.com/apple-fuji-2.jpg"
      ],
      videos: [
        {
          type: "youtube",
          url: "https://youtube.com/watch?v=sample-apple",
          title: "T√°o Fuji ch·∫•t l∆∞·ª£ng cao"
        }
      ],
      tags: ["tr√°i c√¢y", "t√°o", "nh·∫≠p kh·∫©u", "Nh·∫≠t B·∫£n", "fuji"],
      sku: "APPLE-FUJI-001"
    });

    // T·∫°o variants cho t√°o
    const appleLargeVariantId = await firebaseStorage.createProductVariant({
      productId: appleProductId,
      name: "T√°o L·ªõn",
      price: 180000,
      sku: "APPLE-FUJI-L",
      isActive: true,
      sortOrder: 1
    });

    const appleSmallVariantId = await firebaseStorage.createProductVariant({
      productId: appleProductId,
      name: "T√°o Nh·ªè", 
      price: 120000,
      sku: "APPLE-FUJI-S",
      isActive: true,
      sortOrder: 2
    });

    // V√≤ng tr·∫ßm h∆∞∆°ng
    const braceletProductId = await firebaseStorage.createProduct({
      name: "V√≤ng Tr·∫ßm H∆∞∆°ng Thi√™n Nhi√™n",
      description: "V√≤ng tay tr·∫ßm h∆∞∆°ng thi√™n nhi√™n, m√πi th∆°m d·ªãu nh·∫π, phong th·ªßy t·ªët",
      catalogId: jewelryCatalogId,
      subCatalogId: braceletCategoryId,
      basePrice: 500000,
      unit: "chi·∫øc",
      minOrderQuantity: 1,
      isActive: true,
      images: [
        "https://example.com/bracelet-1.jpg",
        "https://example.com/bracelet-2.jpg"
      ],
      videos: [
        {
          type: "facebook",
          url: "https://facebook.com/watch/bracelet-video",
          title: "V√≤ng tr·∫ßm h∆∞∆°ng thi√™n nhi√™n"
        },
        {
          type: "tiktok",
          url: "https://tiktok.com/@shop/video/123456",
          title: "Review v√≤ng tr·∫ßm"
        }
      ],
      tags: ["v√≤ng tay", "tr·∫ßm h∆∞∆°ng", "phong th·ªßy", "thi√™n nhi√™n"],
      sku: "BRACELET-001"
    });

    // T·∫°o variants cho v√≤ng tr·∫ßm
    const braceletAVariantId = await firebaseStorage.createProductVariant({
      productId: braceletProductId,
      name: "V√≤ng Lo·∫°i A",
      price: 800000,
      sku: "BRACELET-A",
      isActive: true,
      sortOrder: 1
    });

    const braceletBVariantId = await firebaseStorage.createProductVariant({
      productId: braceletProductId,
      name: "V√≤ng Lo·∫°i B",
      price: 600000,
      sku: "BRACELET-B", 
      isActive: true,
      sortOrder: 2
    });

    // Rau c·∫£i
    const cabbageProductId = await firebaseStorage.createProduct({
      name: "C·∫£i th·∫£o h·ªØu c∆°",
      description: "C·∫£i th·∫£o tr·ªìng h·ªØu c∆°, kh√¥ng thu·ªëc tr·ª´ s√¢u, t∆∞∆°i xanh",
      catalogId: vegetableCatalogId,
      subCatalogId: leafyVegCategoryId,
      basePrice: 25000,
      unit: "kg",
      minOrderQuantity: 0.5,
      isActive: true,
      images: [
        "https://example.com/cabbage-1.jpg"
      ],
      videos: [],
      tags: ["rau", "c·∫£i th·∫£o", "h·ªØu c∆°", "s·∫°ch"],
      sku: "CABBAGE-ORG-001"
    });

    console.log("‚úì ƒê√£ t·∫°o products v√† variants");

    // 4. T·∫°o inventory cho c√°c s·∫£n ph·∫©m
    
    // Inventory cho t√°o
    await firebaseStorage.updateInventory(appleProductId, undefined, 100, 0);
    await firebaseStorage.updateInventory(appleProductId, appleLargeVariantId, 50, 5);
    await firebaseStorage.updateInventory(appleProductId, appleSmallVariantId, 80, 10);

    // Inventory cho v√≤ng tr·∫ßm
    await firebaseStorage.updateInventory(braceletProductId, undefined, 20, 0);
    await firebaseStorage.updateInventory(braceletProductId, braceletAVariantId, 15, 3);
    await firebaseStorage.updateInventory(braceletProductId, braceletBVariantId, 25, 7);

    // Inventory cho rau c·∫£i
    await firebaseStorage.updateInventory(cabbageProductId, undefined, 50, 12);

    console.log("‚úì ƒê√£ t·∫°o inventory");

    // 5. T·∫°o kh√°ch h√†ng m·∫´u
    const customer1Id = await firebaseStorage.createCustomer({
      name: "Nguy·ªÖn VƒÉn An",
      email: "nguyen.van.an@email.com",
      phone: "0901234567",
      address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
      customerType: "retail",
      totalDebt: 0,
      creditLimit: 5000000,
      isActive: true,
      notes: "Kh√°ch h√†ng th√¢n thi·∫øt"
    });

    const customer2Id = await firebaseStorage.createCustomer({
      name: "Tr·∫ßn Th·ªã B√¨nh",
      email: "tran.thi.binh@email.com",
      phone: "0987654321",
      address: "456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 3, TP.HCM",
      customerType: "wholesale",
      totalDebt: 500000,
      creditLimit: 10000000,
      isActive: true,
      notes: "Kh√°ch s·ªâ l·ªõn"
    });

    console.log("‚úì ƒê√£ t·∫°o customers");

    console.log("üéâ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u cho Firebase!");
    
    return {
      catalogs: [fruitCatalogId, jewelryCatalogId, vegetableCatalogId],
      subCatalogs: [appleCategoryId, braceletCategoryId, leafyVegCategoryId],
      products: [appleProductId, braceletProductId, cabbageProductId],
      customers: [customer1Id, customer2Id]
    };

  } catch (error) {
    console.error("L·ªói khi t·∫°o d·ªØ li·ªáu m·∫´u:", error);
    throw error;
  }
}

// Function to test RASA APIs with sample data
export async function testRasaApis() {
  try {
    console.log("B·∫Øt ƒë·∫ßu test RASA APIs...");
    
    // Test catalog listing
    console.log("Testing GET /api/rasa/catalogs");
    
    // Test product search
    console.log("Testing GET /api/rasa/products/search?q=t√°o");
    
    // Test customer search
    console.log("Testing GET /api/rasa/customers/search?q=Nguy·ªÖn");
    
    console.log("‚úì T·∫•t c·∫£ RASA APIs ƒë√£ s·∫µn s√†ng ƒë·ªÉ test");
    
  } catch (error) {
    console.error("L·ªói khi test RASA APIs:", error);
    throw error;
  }
}