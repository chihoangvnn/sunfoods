'use client'

import { useEffect, useState } from 'react';
import { affiliateService, type AffiliateDashboard } from '@/services/affiliateService';
import { 
  DollarSign, 
  Clock, 
  CheckCircle, 
  ShoppingCart,
  TrendingUp,
  Package
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import LoginModal from '@/components/LoginModal';
import DesktopLoginModal from '@/components/DesktopLoginModal';
import { useResponsive } from '@/hooks/use-mobile';

function formatVND(amount: number): string {
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND',
  }).format(amount);
}

function MetricCard({
  title,
  value,
  subtitle,
  icon: Icon,
  trend,
  color = 'green'
}: {
  title: string;
  value: string;
  subtitle: string;
  icon: any;
  trend?: string;
  color?: string;
}) {
  const colorClasses = {
    green: 'bg-green-100 text-green-600',
    blue: 'bg-blue-100 text-blue-600',
    yellow: 'bg-yellow-100 text-yellow-600',
    purple: 'bg-purple-100 text-purple-600',
  };

  return (
    <Card className="border-none shadow-md hover:shadow-lg transition-shadow">
      <CardContent className="p-6">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <p className="text-sm text-gray-600 mb-1">{title}</p>
            <h3 className="text-2xl font-bold text-gray-900 mb-1">{value}</h3>
            <p className="text-xs text-gray-500">{subtitle}</p>
            {trend && (
              <div className="flex items-center gap-1 mt-2">
                <TrendingUp className="h-3 w-3 text-green-600" />
                <span className="text-xs text-green-600 font-semibold">{trend}</span>
              </div>
            )}
          </div>
          <div className={`p-3 rounded-lg ${colorClasses[color as keyof typeof colorClasses]}`}>
            <Icon className="h-6 w-6" />
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

export default function AffiliateDashboard() {
  const [dashboard, setDashboard] = useState<AffiliateDashboard | null>(null);
  const [stats, setStats] = useState<any | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [showLoginModal, setShowLoginModal] = useState(false);
  const { isMobile } = useResponsive();

  useEffect(() => {
    loadDashboard();
  }, []);

  // Show login modal for 401 errors
  useEffect(() => {
    if (error && error.includes('401')) {
      setShowLoginModal(true);
    }
  }, [error]);

  async function loadDashboard() {
    try {
      setLoading(true);
      setError(null);
      const data = await affiliateService.getDashboard();
      setDashboard(data);
      
      // Load stats for charts
      try {
        const statsData = await affiliateService.getStats(30);
        setStats(statsData);
      } catch (statsError) {
        console.warn('Could not load stats:', statsError);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Lỗi tải dữ liệu');
      console.error('Error loading dashboard:', err);
    } finally {
      setLoading(false);
    }
  }

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-48 mb-6"></div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {[1, 2, 3, 4].map((i) => (
              <div key={i} className="h-32 bg-gray-200 rounded-lg"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  if (error && error.includes('401')) {
    return (
      <>
        {isMobile ? (
          <LoginModal 
            isOpen={showLoginModal}
            onClose={() => setShowLoginModal(false)}
            hideGuestOption={true}
          />
        ) : (
          <DesktopLoginModal 
            isOpen={showLoginModal}
            onClose={() => setShowLoginModal(false)}
            hideGuestOption={true}
          />
        )}
      </>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border-red-200 border rounded-lg p-6 text-center max-w-md mx-auto mt-12">
        <div className="mb-4">
          <svg className="w-16 h-16 mx-auto text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </div>
        <p className="text-red-900 font-semibold text-lg mb-2">Lỗi tải dữ liệu</p>
        <p className="text-sm text-red-700 mb-6">{error}</p>
        <button
          onClick={loadDashboard}
          className="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 font-medium"
        >
          Thử lại
        </button>
      </div>
    );
  }

  if (!dashboard) return null;

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Dashboard</h1>
          <p className="text-gray-600 mt-1">
            Xin chào, <span className="font-semibold">{dashboard.affiliate.name}</span>!
          </p>
        </div>
        <div className="text-right">
          <p className="text-sm text-gray-600">Mã CTV</p>
          <p className="text-lg font-bold text-green-600">{dashboard.affiliate.affiliateCode}</p>
        </div>
      </div>

      {/* Metrics Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <MetricCard
          title="Tổng thu nhập"
          value={formatVND(dashboard.metrics.totalEarnings)}
          subtitle={`Đã nhận: ${formatVND(dashboard.metrics.paidEarnings)}`}
          icon={DollarSign}
          trend={`+${dashboard.metrics.revenueGrowth.toFixed(1)}%`}
          color="green"
        />
        <MetricCard
          title="Chờ thanh toán"
          value={formatVND(dashboard.metrics.pendingEarnings)}
          subtitle="Hoa hồng đang chờ"
          icon={Clock}
          color="yellow"
        />
        <MetricCard
          title="Tổng đơn hàng"
          value={dashboard.metrics.totalReferrals.toString()}
          subtitle={`Doanh thu: ${formatVND(dashboard.metrics.totalRevenue)}`}
          icon={ShoppingCart}
          color="blue"
        />
        <MetricCard
          title="Tỷ lệ chuyển đổi"
          value={`${dashboard.metrics.conversionRate.toFixed(1)}%`}
          subtitle="Hiệu suất bán hàng"
          icon={CheckCircle}
          color="purple"
        />
      </div>

      {/* Quick Stats This Month */}
      <Card className="border-none shadow-md">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Package className="h-5 w-5 text-green-600" />
            Thống kê tháng này
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <p className="text-sm text-gray-600 mb-1">Số đơn hàng</p>
              <p className="text-2xl font-bold text-gray-900">
                {dashboard.quickStats.ordersThisMonth}
              </p>
            </div>
            <div>
              <p className="text-sm text-gray-600 mb-1">Doanh thu</p>
              <p className="text-2xl font-bold text-green-600">
                {formatVND(dashboard.quickStats.revenueThisMonth)}
              </p>
            </div>
            <div>
              <p className="text-sm text-gray-600 mb-1">Giá trị TB/đơn</p>
              <p className="text-2xl font-bold text-blue-600">
                {formatVND(dashboard.quickStats.averageOrderValue)}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Revenue Trend Chart */}
      {stats && stats.dailyStats && stats.dailyStats.length > 0 && (
        <Card className="border-none shadow-md">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5 text-green-600" />
              Xu hướng doanh thu 30 ngày
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-64 flex items-end justify-between gap-1">
              {stats.dailyStats.slice(-15).map((day: any, index: number) => {
                const maxRevenue = Math.max(...stats.dailyStats.map((d: any) => d.revenue || 0), 1);
                const height = maxRevenue > 0 ? ((day.revenue || 0) / maxRevenue) * 100 : 0;
                
                return (
                  <div key={index} className="flex-1 flex flex-col items-center group">
                    <div className="relative w-full">
                      <div
                        className="w-full bg-gradient-to-t from-green-600 to-green-400 rounded-t transition-all hover:from-green-700 hover:to-green-500"
                        style={{ height: `${height}%`, minHeight: '8px' }}
                      />
                      <div className="hidden group-hover:block absolute bottom-full mb-2 left-1/2 -translate-x-1/2 bg-gray-900 text-white text-xs px-2 py-1 rounded whitespace-nowrap">
                        {formatVND(day.revenue || 0)}
                      </div>
                    </div>
                    <span className="text-xs text-gray-500 mt-2">
                      {new Date(day.date).getDate()}
                    </span>
                  </div>
                );
              })}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Top Products */}
      {stats && stats.topProducts && stats.topProducts.length > 0 && (
        <Card className="border-none shadow-md">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Package className="h-5 w-5 text-green-600" />
              Sản phẩm bán chạy
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {stats.topProducts.slice(0, 5).map((product: any, index: number) => (
                <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 rounded-full bg-green-100 flex items-center justify-center">
                      <span className="text-sm font-bold text-green-600">#{index + 1}</span>
                    </div>
                    <div>
                      <p className="font-medium text-gray-900">{product.productName || product.name}</p>
                      <p className="text-xs text-gray-500">{product.sales || product.totalSales} đơn</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="font-bold text-green-600">{formatVND(product.revenue || product.totalRevenue)}</p>
                    <p className="text-xs text-gray-500">Doanh thu</p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Recent Orders Table */}
      {dashboard.recentActivity && dashboard.recentActivity.length > 0 && (
        <Card className="border-none shadow-md">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <ShoppingCart className="h-5 w-5 text-green-600" />
              Đơn hàng gần đây
            </CardTitle>
          </CardHeader>
          <CardContent>
            {/* Table Header */}
            <div className="hidden md:grid grid-cols-12 gap-4 px-4 py-2 bg-gray-100 rounded-t-lg font-semibold text-sm text-gray-700">
              <div className="col-span-3">Khách hàng</div>
              <div className="col-span-4">Sản phẩm</div>
              <div className="col-span-3">Thời gian</div>
              <div className="col-span-2 text-right">Hoa hồng</div>
            </div>
            
            {/* Table Rows */}
            <div className="space-y-2 md:space-y-0">
              {dashboard.recentActivity.slice(0, 10).map((activity: any, index: number) => (
                <div 
                  key={index}
                  className="md:grid md:grid-cols-12 gap-4 p-4 bg-gray-50 md:bg-white md:border-b border-gray-100 rounded-lg md:rounded-none hover:bg-gray-100 transition-colors"
                >
                  <div className="md:col-span-3">
                    <p className="md:hidden text-xs text-gray-500 mb-1">Khách hàng</p>
                    <p className="font-medium text-gray-900">{activity.customerName || 'Khách hàng'}</p>
                  </div>
                  <div className="md:col-span-4 mt-2 md:mt-0">
                    <p className="md:hidden text-xs text-gray-500 mb-1">Sản phẩm</p>
                    <p className="text-sm text-gray-600">{activity.productName || activity.description}</p>
                  </div>
                  <div className="md:col-span-3 mt-2 md:mt-0">
                    <p className="md:hidden text-xs text-gray-500 mb-1">Thời gian</p>
                    <p className="text-xs text-gray-500">
                      {new Date(activity.createdAt).toLocaleString('vi-VN')}
                    </p>
                  </div>
                  <div className="md:col-span-2 md:text-right mt-2 md:mt-0">
                    <p className="md:hidden text-xs text-gray-500 mb-1">Hoa hồng</p>
                    <p className="font-bold text-green-600">
                      {formatVND(activity.commission || activity.amount)}
                    </p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Empty State for Recent Activity */}
      {(!dashboard.recentActivity || dashboard.recentActivity.length === 0) && (
        <Card className="border-none shadow-md">
          <CardContent className="p-12 text-center">
            <Package className="h-16 w-16 text-gray-300 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              Chưa có hoạt động gần đây
            </h3>
            <p className="text-gray-600 mb-4">
              Bắt đầu tạo đơn hàng để theo dõi hoạt động của bạn
            </p>
            <a
              href="/affiliate/quick-order"
              className="inline-block px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              Tạo đơn ngay
            </a>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
